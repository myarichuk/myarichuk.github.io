<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Taming Complexity with Responsibility</title>
      <link href="/2023/02/27/responsibility-chain/"/>
      <url>/2023/02/27/responsibility-chain/</url>
      
        <content type="html"><![CDATA[<h2 id="It-all-starts-with-a-simple-task"><a href="#It-all-starts-with-a-simple-task" class="headerlink" title="It all starts with a simple task"></a>It all starts with a simple task</h2><p>Imagine, one quiet morning, your boss comes to you and says, “Hey, our web shop is growing and we will be having more than one delivery provider now. Can you implement something that would select the best provider after a client pays for a delivery?”.<br>After some back and forth about the criteria on how a delivery company should be selected - mostly by package size, weight and delivery company area, you set out to write the code. How hard can it be? Just write a few <code>if</code> statements, and that’s it, right?</p><p>Some time later, you might end with a following solution. Rather simple but short and concise. No need for over-engineering and <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a> is the right way to go, right?</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//note: IPoint and IGeometry are NetTopologySuite classes and depict geospatial data</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">OrderDelivery</span>(<span class="params">IPoint Address, Vector3 Size, <span class="built_in">float</span> Weight</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDeliveryProvider</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">float</span> MaxWeight &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">   Vector3 MaxSize &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">   IGeometry DeliveryArea &#123; <span class="keyword">get</span>; &#125; <span class="comment">//WKT polygon...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DeliveryProviderSelector</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> IDeliveryProvider _providerA;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> IDeliveryProvider _providerB;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//constructor and initialization</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">bool</span> <span class="title">TryChoose</span>(<span class="params">OrderDelivery delivery, <span class="keyword">out</span> IDeliveryProvider provider</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    provider = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this provider doesn&#x27;t have limits on delivery area and it&#x27;s cheaper so it&#x27;s first</span></span><br><span class="line">    <span class="keyword">if</span>(_providerA.MaxWeight &gt;= delivery.Weight &amp;&amp; _provider.MaxSize &gt;= delivery.Size)</span><br><span class="line">    &#123;</span><br><span class="line">      provider = _providerA;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// _providerA won&#x27;t take the package so make sure _providerB will</span></span><br><span class="line">    <span class="keyword">if</span>(_providerB.DeliveryArea.Contains(delivery.Address)) </span><br><span class="line">    &#123;</span><br><span class="line">      provider = _providerB;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All good and well, but due to an obvious downside of <code>_providerA</code> making far away deliveries only for small and lightweight packages and <code>_providerB</code> limiting the area it agrees to deliver the packages, a contract is made with another delivery provider who agrees to deliver heavier packages further but requires extra payment due to package damange insurance. Easy-peasy, you think, simply add another <code>if</code> statement and that’s it. Next task!</p><p>A month later, another provider is added. Then another. And another. Each provider has unique requirements and conditions for accepting packages, such as different areas of responsibility or types of package contents. Unsurprisingly, the selection logic grows increasingly complex and harder to maintain.<br>What should we do about it?</p><h2 id="Responsibility-trumps-Chaos"><a href="#Responsibility-trumps-Chaos" class="headerlink" title="Responsibility trumps Chaos"></a>Responsibility trumps Chaos</h2><p>This kind of problem is not something new and fortunately, there is a solution: “Chain of Responsibility” pattern. The idea behind the pattern is simple. Instead of having one giant mess of code with various conditional statements and interconnected methods, we divide the possible handlers of the problem into small discrete parts of code. Thus, each handler is responsible for a specific task or condition, and it either handles the request or passes it on to the next handler in the chain. The chain continues until the request is handled or until the end of the chain is reached, at which point the request is considered unhandled.<br>This would allow us to better adhere to the <em>open-close principle</em> if business logic changes and simplify the extension of the logic.  </p><p>In our case, we could apply this pattern by first adding a method <code>CanHandleDelivery</code> to <code>IDeliveryProvider</code>. The method would <em>encapsulate</em> all the relevant conditions for a specific delivery provider and return true whether the provider would accept the delivery or not.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDeliveryProvider</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">float</span> MaxWeight &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">   Vector3 MaxSize &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">   IGeometry DeliveryArea &#123; <span class="keyword">get</span>; &#125; <span class="comment">//WKT polygon...</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="built_in">bool</span> <span class="title">CanHandleDelivery</span>(<span class="params">OrderDelivery delivery, CustomerInfo context</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, we would simply iterate over all providers and choose the first that would accept the delivery.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DeliveryProviderSelector</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> CustomerInfo _customer;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> IEnumerable&lt;IDeliveryProvider&gt; _providers;</span><br><span class="line">  <span class="comment">//constructor and initialization</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">bool</span> <span class="title">TryChoose</span>(<span class="params">OrderDelivery delivery, <span class="keyword">out</span> IDeliveryProvider chosenProvider</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    chosenProvider = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> provider <span class="keyword">in</span> providers) &#123;</span><br><span class="line">      <span class="keyword">if</span>(provider.CanHandleDelivery(delivery, _customer)) &#123;</span><br><span class="line">        chosenProvider = provider; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In addition to adhering to the open-closed principle, such approach promotes loose coupling and separation of concerns by dividing the problem into smaller, discrete parts of code. As a result, changes made to one handler are unlikely to affect the other handlers in the chain, making the code more maintainable and extensible.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As we have seen, proper design pattern usage can simplify your life, if the use-case is correctly recognized. Also, I think that any task, no matter how seemingly simple and insignificant, would benefit from a little planning and deeper understanding of the problem domain. In the example problem I described, asking questions like “would this code change and how?” would have helped coming up with better design than just writing some <code>if</code> statements.</p><p>That’s it, for now. Now go write some code :)</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Design Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Programming </tag>
            
            <tag> Design Patterns </tag>
            
            <tag> Gang Of Four </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>From Inheritance Hell to Component Heaven, the ECS Pattern</title>
      <link href="/2023/02/27/ecs-intro/"/>
      <url>/2023/02/27/ecs-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="All-you-need-is-love-and-Object-Oriented-right-Right"><a href="#All-you-need-is-love-and-Object-Oriented-right-Right" class="headerlink" title="All you need is love and Object-Oriented, right? Right?"></a>All you need is love and Object-Oriented, right? Right?</h2><p>Object-Oriented programming is one of the most widely used programming paradigms. It’s flexible, powerful, and has proven its worth over the years. However, as with any tool, there are situations where it might not be the best fit. In some cases, using an Object-Oriented approach can result in code that’s hard to maintain and overly complex.</p><p>Let’s say we’re developing a game and we want to add magic weapons. It should be trivial to create a hierarchy of base classes for melee and ranged weapons, isn’t it? So we might create classes that look like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Armor</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> ArmorRating &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Damage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MeleeWeapon</span> : <span class="title">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SwingSpeed &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RangedWeapon</span> : <span class="title">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Range &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> AmmoCapacity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But what if we want to allow archers to use their bows in melee combat? And contrary to fantasy cliche, bows can actually be used in melee combat. Don’t believe me? Check this out. </p><p align="center"><iframe width="350" height="197" src="https://www.youtube.com/embed/_rb28VGRWbU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></p><p>Anyway, if we’re lucky enough to be using C++, or maybe we’re stuck with it, we might be tempted to use multiple inheritance to inherit the bow class from both <code>RangedWeapon</code> and <code>MeleeWeapon</code>. But let’s face it, most other object-oriented languages don’t play so nicely, and it’s no coincidence that multiple inheritance isn’t available in many of them. It can cause so many issues that it’s usually not worth using it in non-trivial projects. As a result, we would probably end up creating something like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MeleeAndRangedWeapon</span> : <span class="title">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SwingSpeed &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Range &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> AmmoCapacity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bow</span>: <span class="title">MeleeAndRangedWeapon</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we’ve seen, deep class hierarchies can quickly become unwieldy and inflexible when it comes to implementing complex game logic. Consider the example of adding shield bashing to our game - should a shield inherit from the <code>Weapon</code> or some <code>Armor</code> class, or perhaps from a new hybrid class? This kind of decision can quickly propagate throughout the codebase, making it harder to maintain and evolve.</p><p>To overcome these limitations, we can turn to the Entity Component System (ECS) pattern. Unlike traditional OO approaches, ECS separates an object’s properties and behaviors into distinct components, which can be combined in flexible ways to create new game entities. This makes it much easier to add or modify game behavior without affecting other parts of the code, while also improving performance by optimizing for cache locality and minimizing memory overhead. In the next section, we’ll dive into the details of how ECS works and how you can use it to build more flexible and performant game systems.</p><h2 id="So-what-is-this-Entity-Component-System"><a href="#So-what-is-this-Entity-Component-System" class="headerlink" title="So, what is this Entity Component System?"></a>So, what is this Entity Component System?</h2><p>Entity Component System (ECS) is a design pattern originally invented for structuring game engine architectures. Unlike the “traditional” Object-Oriented paradigm, ECS separates game objects into three primary elements: entities, components, and systems.</p><p>Entities are simply unique IDs that don’t have inherent behavior or data - they serve as an “anchor” to represent game objects to which data is attached. Components are where the data is stored and represent specific aspects of a game object’s behavior, like its position in space or health. Systems are responsible for performing actions on one or more components of an entity and typically represent one aspect of functionality, such as rendering or physics simulation.</p><h2 id="ECS-and-memory-locality"><a href="#ECS-and-memory-locality" class="headerlink" title="ECS and memory locality"></a>ECS and memory locality</h2><p>Another cool thing about ECS is that it makes use of the magic of memory locality to improve performance. What’s memory locality, you ask?<br>Well, in ECS, the components are often stored as simple structs in arrays, and the systems that operate on them iterate over those arrays. This might not sound too exciting, but it actually makes a big difference in how fast the code runs. When a computer reads data from memory, it doesn’t just grab one byte at a time - it grabs a whole chunk of nearby bytes, known as a cache line or cache prefetching. This means that if your data is stored in a way that’s scattered around in memory, the computer has to keep jumping around from cache line to cache line, which is slow.</p><p>But when your data is stored in a nice, contiguous array like in ECS, the computer can grab a whole bunch of it in one fell swoop, without having to keep jumping around. This makes iterating over the data much, much faster, which can be a big advantage when you’re dealing with large amounts of data.  </p><blockquote><p>How big is the effect of data locality? See the post here <a href="/2020/02/17/data-locality/" title="Sequential memory access is... faster?">Sequential memory access is... faster?</a></p></blockquote><h2 id="Enough-with-hand-waving-Show-me-the-code"><a href="#Enough-with-hand-waving-Show-me-the-code" class="headerlink" title="Enough with hand-waving! Show me the code :)"></a>Enough with hand-waving! Show me the code :)</h2><p>We will be using the awesome <a href="https://github.com/Doraku/DefaultEcs">DefaultEcs</a> library for illustrating how ECS pattern can be used.  </p><p>In the following code, we create an entity, attach a component to it and fetch it. Note that we can attach multiple <em>different</em> components to an entity and do it at runtime.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> DefaultEcs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">record</span> <span class="title">struct</span> <span class="title">Position</span>(<span class="title">float</span> <span class="title">X</span>, <span class="title">float</span> <span class="title">Y</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//create an entity registry</span></span><br><span class="line">        <span class="keyword">var</span> world = <span class="keyword">new</span> World();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//create an entity and add components to it</span></span><br><span class="line">        <span class="keyword">var</span> entity = world.CreateEntity();</span><br><span class="line">        entity.Set(<span class="keyword">new</span> Position &#123; X = <span class="number">10f</span>, Y = <span class="number">20f</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get the position component from the entity</span></span><br><span class="line">        <span class="keyword">ref</span> Position position = <span class="keyword">ref</span> entity.Get&lt;Position&gt;();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Position: (<span class="subst">&#123;position.X&#125;</span>, <span class="subst">&#123;position.Y&#125;</span>)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, let’s add some interaction to the mix. We will add another component, <code>Velocity</code> which would indicate whether the entity has any velocity and not just a static object with a location.<br>We will also add <code>VelocitySystem</code> which will implement the movement of the entity - not all object should remain static, otherwiseit would make a game really boring. Essentially, velocity system will iterate over all entities that have position and velocity components and move them to a new location, depending on how much time has passed.  </p><blockquote><p>Notice how in the <code>VelocitySystem</code> constructor we choose which components have to be attached to an entity for this system to work. Kind of a filter.</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title">struct</span> <span class="title">Velocity</span>(<span class="title">float</span> <span class="title">X</span>, <span class="title">float</span> <span class="title">Y</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector2 Value =&gt; <span class="keyword">new</span>(X, Y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">record</span> <span class="title">struct</span> <span class="title">Position</span>(<span class="title">float</span> <span class="title">X</span>, <span class="title">float</span> <span class="title">Y</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VelocitySystem</span> : <span class="title">AEntitySetSystem</span>&lt;<span class="title">float</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VelocitySystem</span>(<span class="params">World world, IParallelRunner runner</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">world.GetEntities(</span>)</span></span><br><span class="line"><span class="function">                    .<span class="title">With</span>&lt;<span class="title">Velocity</span>&gt;()</span></span><br><span class="line"><span class="function">                    .<span class="title">With</span>&lt;<span class="title">Position</span>&gt;()</span></span><br><span class="line"><span class="function">                    .<span class="title">AsSet</span>(), runner)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">float</span> elapsedTime, <span class="keyword">in</span> Entity entity</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">ref</span> Velocity velocity = <span class="keyword">ref</span> entity.Get&lt;Velocity&gt;();</span><br><span class="line">        <span class="keyword">ref</span> Position position = <span class="keyword">ref</span> entity.Get&lt;Position&gt;();</span><br><span class="line"></span><br><span class="line">        Vector2 offset = velocity.Value * elapsedTime;</span><br><span class="line"></span><br><span class="line">        position.X += offset.X;</span><br><span class="line">        position.Y += offset.Y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, in order to make things happen, we simply run the system. Not very complex, isn’t it?</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//initialize the runner, typically this is done once</span></span><br><span class="line"><span class="keyword">var</span> runner = <span class="keyword">new</span> DefaultParallelRunner(Environment.ProcessorCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">//in a typical use-case there will be more than one system running</span></span><br><span class="line"><span class="keyword">var</span> system = <span class="keyword">new</span> VelocitySystem(world, runner);</span><br><span class="line"></span><br><span class="line"><span class="comment">//each time the system is updated, the logic will run.</span></span><br><span class="line"><span class="comment">//note that the state doesn&#x27;t have to be a primitive like we have here</span></span><br><span class="line"><span class="keyword">var</span> timePassed = <span class="number">0.5f</span>;</span><br><span class="line">system.Update(timePassed);</span><br></pre></td></tr></table></figure><h2 id="So-when-should-I-use-ECS"><a href="#So-when-should-I-use-ECS" class="headerlink" title="So, when should I use ECS?"></a>So, when should I use ECS?</h2><ul><li>Complexity: The decision to use ECS should depend on the nature of the project’s data and the expected business logic. It’s possible for even a simple project to benefit from using ECS if it involves processing large amounts of similar data. Also, ECS can be a good fit for projects that are expected to grow in complexity over time or have frequently changing requirements.</li><li>Performance: ECS is not a silver bullet, it’s benefits will be nullified by the cost of implementing and maintaining the ECS architecture, especially in smaller projects. Also, consider that performance benefits of ECS may only be noticeable in specific use cases, and that other architecture patterns may be more appropriate and will yield better results in other situations.</li><li>Code maintainability: In general, ECS will yield more modular and reusable code, it can improve maintainability in the long term. However, the maintainability can and will depend on the size and complexity of the project, how much experience developers have and the quality of the design.</li><li>Compatibility with existing codebase: The decision to use ECS should be based on the specific needs of the project, rather than compatibility with an existing codebase. Obviously, switching to such a different architectural pattern can be costly, but it’s not necessarily a reason to avoid using ECS at all. It may be worth considering whether ECS can be gradually integrated into the codebase, perhaps through a hybrid architecture that combines ECS with other patterns.</li></ul><h2 id="In-conclusion"><a href="#In-conclusion" class="headerlink" title="In conclusion"></a>In conclusion</h2><p>So, as you can see, ECS pattern can make your life easier in some occasions, but remember, it is not a silver bullet, it is just a tool. And if you do use it, keep your components small and concise and keep your systems focused on doing one thing and doing it well. That’s it and now go write some code! :)</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Design Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Programming </tag>
            
            <tag> Entity Component System </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NancyFx vs. FeatherHttp</title>
      <link href="/2020/04/25/nancyfx-vs-featherhttp/"/>
      <url>/2020/04/25/nancyfx-vs-featherhttp/</url>
      
        <content type="html"><![CDATA[<p>As a long time fan of the lightweight syntax of the awesome <a href="http://nancyfx.org/">NancyFx web framework</a>, I was really curious when I stumbled upon <a href="https://github.com/featherhttp/framework">FeatherHttp</a>, a new low-ceremony framework for building web services in .Net Core applications.  </p><p>Naturally, I was curious not only about the syntax but about the performance as well. So I decided to compare their raw performance, using the awesome <a href="https://github.com/giltene/wrk2">wrk2 tool</a>.<br>As a first step, I created two HTTP servers with one endpoint that does the same work in both cases.</p><p>NancyFx server code looks like this:  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorldModule</span> : <span class="title">NancyModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldModule</span>()</span> =&gt; </span><br><span class="line">        Get(<span class="string">&quot;/foo/bar&quot;</span>, @params =&gt; Response.AsJson(<span class="keyword">new</span> &#123; Message = <span class="string">&quot;Hello World!&quot;</span> &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; </span><br><span class="line">        <span class="keyword">await</span> CreateWebHostBuilder().Build().RunAsync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>()</span> =&gt;</span><br><span class="line">        <span class="keyword">new</span> WebHostBuilder()</span><br><span class="line">            .UseKestrel()</span><br><span class="line">            .UseStartup&lt;Startup&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span> =&gt; app.UseNancy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And FeatherHttp server code looks like this:  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> app = WebApplication.Create(args);</span><br><span class="line"></span><br><span class="line">        app.MapGet(<span class="string">&quot;/foo/bar&quot;</span>, </span><br><span class="line">            <span class="keyword">async</span> http =&gt; </span><br><span class="line">                <span class="keyword">await</span> http.Response.WriteJsonAsync(<span class="keyword">new</span> &#123; Message = <span class="string">&quot;Hello World!&quot;</span> &#125;));</span><br><span class="line">        <span class="keyword">await</span> app.RunAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>I really LOVED the syntax of FeatherHttp - really concise and low-ceremonly. It is even shorter than NancyFx!</p></blockquote><p>The next step was to actually do the benchmarking. I ran the following command for both of the services, which were compiled using .Net Core 3.1  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -c500 -t4 -d30s -R2000 http://localhost:5000/</span><br></pre></td></tr></table></figure><blockquote><p>Those parameters mean - open 500 connections, try to maintain 2000 req/sec over 30 seconds and use 4 threads for concurrent requests</p></blockquote><p><strong>For NancyFx I got:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Running 30s test @ http://localhost:5000/</span><br><span class="line">  4 threads and 500 connections</span><br><span class="line">  Thread calibration: mean lat.: 1080.288ms, rate sampling interval: 4083ms</span><br><span class="line">  Thread calibration: mean lat.: 803.334ms, rate sampling interval: 3108ms</span><br><span class="line">  Thread calibration: mean lat.: 934.588ms, rate sampling interval: 3475ms</span><br><span class="line">  Thread calibration: mean lat.: 919.774ms, rate sampling interval: 3850ms</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     2.19s     1.60s    8.94s    64.88%</span><br><span class="line">    Req/Sec   459.00     21.23   499.00     68.42%</span><br><span class="line">  51947 requests in 30.09s, 1.37GB read</span><br><span class="line">  Non-2xx or 3xx responses: 51947</span><br><span class="line">Requests/sec:   1726.33</span><br><span class="line">Transfer/sec:     46.60MB</span><br></pre></td></tr></table></figure><p><strong>And for FeatherHttp I got:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Running 30s test @ http://localhost:5000/</span><br><span class="line">  4 threads and 500 connections</span><br><span class="line">  Thread calibration: mean lat.: 30.436ms, rate sampling interval: 92ms</span><br><span class="line">  Thread calibration: mean lat.: 31.322ms, rate sampling interval: 95ms</span><br><span class="line">  Thread calibration: mean lat.: 2.804ms, rate sampling interval: 10ms</span><br><span class="line">  Thread calibration: mean lat.: 33.685ms, rate sampling interval: 97ms</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    22.65ms   15.65ms  64.58ms   55.21%</span><br><span class="line">    Req/Sec   525.25    341.35     3.00k    73.96%</span><br><span class="line">  58471 requests in 30.04s, 5.52MB read</span><br><span class="line">  Non-2xx or 3xx responses: 58471</span><br><span class="line">Requests/sec:   1946.75</span><br><span class="line">Transfer/sec:    188.21KB</span><br></pre></td></tr></table></figure><p>The numbers mean that FeatherHttp is a winner by only a small margin. Though, during high workloads, 10% improvement in throughput could be significant.<br>Note that this is a very basic comparison of performance capabilities of both frameworks. First, despite it’s relatively complete API, FeatherHttp is at an alpha stage, so its performance might change in the future, for better or for worse.<br>Second, and more importantly, a true performance benchmark would involve comparing the speed of routing algorithm, memory allocations per request and per use of various features and more.</p><p>Overall, I am excited by FeatherHttp framework and intend to use it in one of my pet projects as soon as opportunity arises :)</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Performance </tag>
            
            <tag> Programming </tag>
            
            <tag> REST </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>More efficient string concatenation with string.Create()</title>
      <link href="/2020/04/09/fun-string-create/"/>
      <url>/2020/04/09/fun-string-create/</url>
      
        <content type="html"><![CDATA[<p>Strings are immutable in C#, this is a common knowledge. Unless you use pointers in unsafe blocks, that is.  Apparently, there is another way of making strings mutable.<br>When I discovered <code>string.Create()</code>, a not-so-new but for some reason overlooked (by me at least!) <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.create?view=netcore-3.1">method</a> that was added since .Net Core 2.2 and Netstandard 2.1, I was really curious how it works (and how well it works too), so I looked at relevant .Net Core source code.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Create</span>&lt;<span class="title">TState</span>&gt;(<span class="params"><span class="built_in">int</span> length, TState state, SpanAction&lt;<span class="built_in">char</span>, TState&gt; action</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//omitted some input validation code</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//THIS is the interesting part!</span></span><br><span class="line">    <span class="built_in">string</span> result = FastAllocateString(length);</span><br><span class="line">    action(<span class="keyword">new</span> Span&lt;<span class="built_in">char</span>&gt;(<span class="keyword">ref</span> result.GetRawStringData(), length), state);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//some more code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This means that the <code>Span&lt;char&gt;</code> that the <code>action</code> receives is a glorified pointer to raw memory of newly allocated string. So far, a similar effect could have been achieved by using pointers to strings in an <code>unsafe</code> block.<br>Naturally, I decided to test how fast would be such approach. I decided to test the performance of string concatenation, if implemented using <code>string.Create()</code>  </p><p>First, I implemented <code>string.Join()</code> using pointers in an <code>unsafe</code> method - using pointers allows to simply to modify the resulting string in place, without new allocations.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">JoinWithPtrs</span>(<span class="params">IReadOnlyList&lt;<span class="built_in">string</span>&gt; strings, <span class="built_in">string</span> separator = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strings.Count; i++)</span><br><span class="line">        totalSize += strings[i].Length;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">var</span> hasSeparator = !<span class="built_in">string</span>.IsNullOrEmpty(separator);</span><br><span class="line">    <span class="keyword">if</span>(hasSeparator)</span><br><span class="line">        totalSize += (separator.Length * strings.Count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;\0&#x27;</span>, totalSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fixed</span>(<span class="built_in">char</span>* resultPtr = result)                        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uint</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> separatorByteCount = (<span class="built_in">uint</span>)separator.Length * <span class="keyword">sizeof</span>(<span class="built_in">char</span>);   </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strings.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> current = strings[i];</span><br><span class="line">            <span class="keyword">var</span> byteCount = (<span class="built_in">uint</span>)current.Length * <span class="keyword">sizeof</span>(<span class="built_in">char</span>);                  </span><br><span class="line">            <span class="keyword">fixed</span> (<span class="built_in">char</span>* strPtr = current)</span><br><span class="line">                Unsafe.CopyBlockUnaligned(resultPtr + offset, strPtr, byteCount);</span><br><span class="line">                    </span><br><span class="line">            offset += (<span class="built_in">uint</span>)current.Length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hasSeparator &amp;&amp; i &lt; strings.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">fixed</span>(<span class="built_in">char</span>* separatorPtr = separator)</span><br><span class="line">                    Unsafe.CopyBlockUnaligned(resultPtr + offset, separatorPtr, separatorByteCount);</span><br><span class="line">                offset += (<span class="built_in">uint</span>)separator.Length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then I implemented  <code>string.Join()</code> using the newer <code>string.Create()</code> method.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">JoinStringCreate</span>(<span class="params">IReadOnlyList&lt;<span class="built_in">string</span>&gt; strings, <span class="built_in">string</span> separator = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strings.Count; i++)</span><br><span class="line">        totalSize += strings[i].Length;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">string</span>.IsNullOrEmpty(separator))</span><br><span class="line">        totalSize += (separator.Length * strings.Count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//construct the resulting string</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.Create(totalSize, (strings, separator), (chars, state) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        note that &#x27;chars&#x27; parameter of the lambda</span></span><br><span class="line"><span class="comment">        is the Span&lt;char&gt; that is in fact a pointer to newly allocated string</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">var</span> offset = <span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">var</span> separatorSpan = state.separator.AsSpan();</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; state.strings.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> currentStr = state.strings[i];                    </span><br><span class="line">            currentStr.AsSpan().CopyTo(chars.Slice(offset));</span><br><span class="line">            offset += currentStr.Length;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">string</span>.IsNullOrEmpty(state.separator) &amp;&amp; i &lt; state.strings.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                separatorSpan.CopyTo(chars.Slice(offset));</span><br><span class="line">                offset += state.separator.Length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the test I came up with.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">MemoryDiagnoser</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _strings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _separator = <span class="string">&quot;*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Params(3, 25, 100)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ListSize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IterationSetup</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _strings = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ListSize; i++)</span><br><span class="line">            _strings.Add(<span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StringCreateJoin</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> _ = StringUtils.JoinStringCreate(_strings, _separator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StringPtrJoin</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> _ = StringUtils.JoinWithPtrs(_strings, _separator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegularStringJoin</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> _ = <span class="built_in">string</span>.Join(_separator, _strings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StringConcatenation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _strings.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result += _strings[i];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; _strings.Count - <span class="number">1</span>)</span><br><span class="line">                result += _separator;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ZStringJoin</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> _ = ZString.Join(_separator, _strings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StringBuilderJoin</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _strings.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(_strings[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; _strings.Count - <span class="number">1</span>)</span><br><span class="line">                sb.Append(_separator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> _ = sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; BenchmarkRunner.Run&lt;Program&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Just to be thorough, I added to the test the <a href="https://github.com/Cysharp/ZString">ZString library</a>, an awesome library by the creator of equally awesome <a href="https://github.com/neuecc/Utf8Json">Utf8Json</a>. According to the code I saw in ZString repo, it should perform minimum allocations on managed heap (if any!)</p></blockquote><p>The tests results were a bit surprising.</p><table><thead><tr><th>Method</th><th>ListSize</th><th align="right">Mean</th><th align="right">Error</th><th align="right">StdDev</th><th align="right">Median</th><th align="right">Gen 0</th><th align="right">Gen 1</th><th align="right">Gen 2</th><th align="right">Allocated</th></tr></thead><tbody><tr><td><strong>StringCreateJoin</strong></td><td><strong>3</strong></td><td align="right"><strong>1.436 μs</strong></td><td align="right"><strong>0.0589 μs</strong></td><td align="right"><strong>0.1511 μs</strong></td><td align="right"><strong>1.350 μs</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>48 B</strong></td></tr><tr><td>StringPtrJoin</td><td>3</td><td align="right">1.327 μs</td><td align="right">0.1638 μs</td><td align="right">0.4428 μs</td><td align="right">1.100 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">48 B</td></tr><tr><td>RegularStringJoin</td><td>3</td><td align="right">2.631 μs</td><td align="right">0.2790 μs</td><td align="right">0.7731 μs</td><td align="right">2.300 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">88 B</td></tr><tr><td>StringConcatenation</td><td>3</td><td align="right">1.196 μs</td><td align="right">0.0576 μs</td><td align="right">0.1497 μs</td><td align="right">1.200 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">160 B</td></tr><tr><td>ZStringJoin</td><td>3</td><td align="right">2.619 μs</td><td align="right">0.2829 μs</td><td align="right">0.8118 μs</td><td align="right">2.200 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">48 B</td></tr><tr><td>StringBuilderJoin</td><td>3</td><td align="right">1.154 μs</td><td align="right">0.0674 μs</td><td align="right">0.1728 μs</td><td align="right">1.050 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">152 B</td></tr><tr><td><strong>StringCreateJoin</strong></td><td><strong>25</strong></td><td align="right"><strong>2.224 μs</strong></td><td align="right"><strong>0.2860 μs</strong></td><td align="right"><strong>0.8206 μs</strong></td><td align="right"><strong>1.700 μs</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>224 B</strong></td></tr><tr><td>StringPtrJoin</td><td>25</td><td align="right">2.277 μs</td><td align="right">0.3194 μs</td><td align="right">0.9366 μs</td><td align="right">1.700 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">224 B</td></tr><tr><td>RegularStringJoin</td><td>25</td><td align="right">3.296 μs</td><td align="right">0.3298 μs</td><td align="right">0.9302 μs</td><td align="right">2.800 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">264 B</td></tr><tr><td>StringConcatenation</td><td>25</td><td align="right">2.529 μs</td><td align="right">0.0487 μs</td><td align="right">0.0891 μs</td><td align="right">2.500 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">6144 B</td></tr><tr><td>ZStringJoin</td><td>25</td><td align="right">4.727 μs</td><td align="right">0.3210 μs</td><td align="right">0.8949 μs</td><td align="right">4.300 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">224 B</td></tr><tr><td>StringBuilderJoin</td><td>25</td><td align="right">2.632 μs</td><td align="right">0.3303 μs</td><td align="right">0.9531 μs</td><td align="right">2.050 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">768 B</td></tr><tr><td><strong>StringCreateJoin</strong></td><td><strong>100</strong></td><td align="right"><strong>2.875 μs</strong></td><td align="right"><strong>0.0579 μs</strong></td><td align="right"><strong>0.0452 μs</strong></td><td align="right"><strong>2.900 μs</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>824 B</strong></td></tr><tr><td>StringPtrJoin</td><td>100</td><td align="right">4.034 μs</td><td align="right">0.4147 μs</td><td align="right">1.1964 μs</td><td align="right">4.200 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">824 B</td></tr><tr><td>RegularStringJoin</td><td>100</td><td align="right">4.677 μs</td><td align="right">0.0791 μs</td><td align="right">0.1561 μs</td><td align="right">4.700 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">2320 B</td></tr><tr><td>StringConcatenation</td><td>100</td><td align="right">13.320 μs</td><td align="right">0.5394 μs</td><td align="right">1.5036 μs</td><td align="right">12.750 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">84744 B</td></tr><tr><td>ZStringJoin</td><td>100</td><td align="right">12.110 μs</td><td align="right">0.5239 μs</td><td align="right">1.3893 μs</td><td align="right">12.100 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">824 B</td></tr><tr><td>StringBuilderJoin</td><td>100</td><td align="right">4.233 μs</td><td align="right">0.3968 μs</td><td align="right">1.1575 μs</td><td align="right">4.350 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">2280 B</td></tr></tbody></table><p>First, I was really surprised to find that .Net’s <code>StringBuilder</code> does more allocations than I expected, especially in comparison to my implementations of <code>Join()</code>. Yes, it is consistently more efficient in allocations and runtime than regular string concatenation (with the ‘+’ operator), but since <code>StringBuilder</code> deals with pointers (as can be seen <a href="https://github.com/microsoft/referencesource/blob/master/mscorlib/system/text/stringbuilder.cs#L634">in the reference source</a>), I expected it to be doing less allocations.<br>After browsing <code>StringBuilder</code> reference source, I noticed the following code in its constructor (as can be seen <a href="https://github.com/microsoft/referencesource/blob/master/mscorlib/system/text/stringbuilder.cs#L146">here</a>)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//capacity by default is 8000, if no capacity is specified.</span></span><br><span class="line">m_ChunkChars = <span class="keyword">new</span> <span class="built_in">char</span>[capacity];</span><br></pre></td></tr></table></figure><p>Interestingly enough, in the <code>Append()</code> method, if there is not enough capacity of <code>m_ChunkChars</code>, the <code>StringBuilder</code> will allocate new buffer char array in <code>ExpandByABlock()</code> method (which can be seen <a href="https://github.com/microsoft/referencesource/blob/master/mscorlib/system/text/stringbuilder.cs#L1962">here</a>).</p><p>So, in order to see the best performance out of the <code>StringBuilder</code> I changed its test method to supply the resulting string length and re-run the test.<br>Here are the results.  </p><table><thead><tr><th>Method</th><th>ListSize</th><th align="right">Mean</th><th align="right">Error</th><th align="right">StdDev</th><th align="right">Median</th><th align="right">Gen 0</th><th align="right">Gen 1</th><th align="right">Gen 2</th><th align="right">Allocated</th></tr></thead><tbody><tr><td><strong>StringCreateJoin</strong></td><td><strong>3</strong></td><td align="right"><strong>1.505 μs</strong></td><td align="right"><strong>0.0962 μs</strong></td><td align="right"><strong>0.2501 μs</strong></td><td align="right"><strong>1.400 μs</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>48 B</strong></td></tr><tr><td>StringPtrJoin</td><td>3</td><td align="right">1.647 μs</td><td align="right">0.2524 μs</td><td align="right">0.7282 μs</td><td align="right">1.200 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">48 B</td></tr><tr><td>RegularStringJoin</td><td>3</td><td align="right">2.901 μs</td><td align="right">0.3827 μs</td><td align="right">1.0667 μs</td><td align="right">2.400 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">88 B</td></tr><tr><td>StringConcatenation</td><td>3</td><td align="right">1.524 μs</td><td align="right">0.2490 μs</td><td align="right">0.7062 μs</td><td align="right">1.200 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">160 B</td></tr><tr><td>ZStringJoin</td><td>3</td><td align="right">3.125 μs</td><td align="right">0.3665 μs</td><td align="right">1.0515 μs</td><td align="right">2.800 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">48 B</td></tr><tr><td>StringBuilderJoin</td><td>3</td><td align="right">1.743 μs</td><td align="right">0.2516 μs</td><td align="right">0.7219 μs</td><td align="right">1.350 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">144 B</td></tr><tr><td><strong>StringCreateJoin</strong></td><td><strong>25</strong></td><td align="right"><strong>2.337 μs</strong></td><td align="right"><strong>0.3120 μs</strong></td><td align="right"><strong>0.8902 μs</strong></td><td align="right"><strong>1.800 μs</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>224 B</strong></td></tr><tr><td>StringPtrJoin</td><td>25</td><td align="right">2.268 μs</td><td align="right">0.3398 μs</td><td align="right">0.9805 μs</td><td align="right">1.700 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">224 B</td></tr><tr><td>RegularStringJoin</td><td>25</td><td align="right">4.023 μs</td><td align="right">0.6376 μs</td><td align="right">1.8293 μs</td><td align="right">3.400 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">264 B</td></tr><tr><td>StringConcatenation</td><td>25</td><td align="right">3.078 μs</td><td align="right">0.3658 μs</td><td align="right">1.0437 μs</td><td align="right">2.600 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">6144 B</td></tr><tr><td>ZStringJoin</td><td>25</td><td align="right">5.118 μs</td><td align="right">0.4363 μs</td><td align="right">1.2449 μs</td><td align="right">4.650 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">224 B</td></tr><tr><td>StringBuilderJoin</td><td>25</td><td align="right">2.474 μs</td><td align="right">0.3755 μs</td><td align="right">1.0894 μs</td><td align="right">1.800 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">496 B</td></tr><tr><td><strong>StringCreateJoin</strong></td><td><strong>100</strong></td><td align="right"><strong>4.506 μs</strong></td><td align="right"><strong>0.4507 μs</strong></td><td align="right"><strong>1.3217 μs</strong></td><td align="right"><strong>4.500 μs</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>-</strong></td><td align="right"><strong>824 B</strong></td></tr><tr><td>StringPtrJoin</td><td>100</td><td align="right">3.969 μs</td><td align="right">0.3715 μs</td><td align="right">1.0778 μs</td><td align="right">4.000 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">824 B</td></tr><tr><td>RegularStringJoin</td><td>100</td><td align="right">6.362 μs</td><td align="right">0.4833 μs</td><td align="right">1.3472 μs</td><td align="right">6.100 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">2320 B</td></tr><tr><td>StringConcatenation</td><td>100</td><td align="right">13.838 μs</td><td align="right">0.6251 μs</td><td align="right">1.7425 μs</td><td align="right">13.400 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">84744 B</td></tr><tr><td>ZStringJoin</td><td>100</td><td align="right">10.792 μs</td><td align="right">0.1016 μs</td><td align="right">0.0793 μs</td><td align="right">10.800 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">824 B</td></tr><tr><td>StringBuilderJoin</td><td>100</td><td align="right">3.914 μs</td><td align="right">0.4024 μs</td><td align="right">1.1739 μs</td><td align="right">4.100 μs</td><td align="right">-</td><td align="right">-</td><td align="right">-</td><td align="right">1696 B</td></tr></tbody></table><p>This change did make a difference, especially for large size of the list to concatenate (because if the <code>m_ChunkChars</code> is initialized to proper length, the <code>StringBuilder</code> doesn’t need to make additional allocations to grow its buffer)<br>Plain old string concatenation unsurprisingly makes lots of allocations, but for small amount of strings it is really fast.</p><p><code>ZString.Join</code> is works slower than anything except plain string concatenation, but its <code>Join()</code> method is as efficient as my implementations - which is good to know!</p><p>And finally, the <code>StringCreateJoin()</code> allocates the same amount of memory as the approach with pointers, but interestingly, <code>StringCreateJoin()</code> is a bit slower than <code>StringPtrJoin()</code> approach.  </p><blockquote><p>Note that the kind of code I have in <code>StringPtrJoin()</code> and <code>StringCreateJoin()</code> are micro-optimizations and while occasionally useful, should be used only when profiling shows a hot-spot in code.</p></blockquote><p>Also, <code>StringCreateJoin()</code> being a bit slower than <code>StringPtrJoin()</code> shouldn’t be surprsing. In order to support the “magic” of that <code>SpanAction</code> lambda, the compiler generates the following code. Extra method invocations and in general doing more work than <code>StringPtrJoin()</code>, makes <code>StringCreateJoin()</code> slower.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line">[<span class="meta">CompilerGenerated</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;&gt;<span class="title">c</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> &lt;&gt;c &lt;&gt;<span class="number">9</span> = <span class="keyword">new</span> &lt;&gt;c();</span><br><span class="line"></span><br><span class="line">    [<span class="meta">TupleElementNames(new string[</span>] &#123;</span><br><span class="line">        <span class="string">&quot;strings&quot;</span>,</span><br><span class="line">        <span class="string">&quot;separator&quot;</span></span><br><span class="line">    &#125;)]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SpanAction&lt;<span class="built_in">char</span>, ValueTuple&lt;List&lt;<span class="built_in">string</span>&gt;, <span class="built_in">string</span>&gt;&gt; &lt;&gt;<span class="number">9</span>__0_0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">void</span> &lt;JoinStringCreate&gt;b__0_0(Span&lt;<span class="built_in">char</span>&gt; chars, [TupleElementNames(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line">        <span class="string">&quot;strings&quot;</span>,</span><br><span class="line">        <span class="string">&quot;separator&quot;</span></span><br><span class="line">    &#125;)] ValueTuple&lt;List&lt;<span class="built_in">string</span>&gt;, <span class="built_in">string</span>&gt; state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">        ReadOnlySpan&lt;<span class="built_in">char</span>&gt; readOnlySpan = MemoryExtensions.AsSpan(state.Item2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; state.Item1.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> text = state.Item1[i];</span><br><span class="line">            MemoryExtensions.AsSpan(text).CopyTo(chars.Slice(num));</span><br><span class="line">            num += text.Length;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(state.Item2) &amp;&amp; i &lt; state.Item1.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                readOnlySpan.CopyTo(chars.Slice(num));</span><br><span class="line">                num += state.Item2.Length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">JoinStringCreate</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; strings, <span class="built_in">string</span> separator = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strings.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num += strings[i].Length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(separator))</span><br><span class="line">    &#123;</span><br><span class="line">        num += separator.Length * strings.Count - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.Create(num, <span class="keyword">new</span> ValueTuple&lt;List&lt;<span class="built_in">string</span>&gt;, <span class="built_in">string</span>&gt;(strings, separator), &lt;&gt;c.&lt;&gt;<span class="number">9</span>__0_0 ?? (&lt;&gt;c.&lt;&gt;<span class="number">9</span>__0_0 = <span class="keyword">new</span> SpanAction&lt;<span class="built_in">char</span>, ValueTuple&lt;List&lt;<span class="built_in">string</span>&gt;, <span class="built_in">string</span>&gt;&gt;(&lt;&gt;c.&lt;&gt;<span class="number">9.</span>&lt;JoinStringCreate&gt;b__0_0)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>Overall, I can say that this was an interesting excercise in micro-optimizations!<br>Also, my two attempts at string concatenation are not guaranteed to handle any characters othen than utf8 - .Net’s <code>StringBuilder</code> uses <code>wstrcpy()</code> to copy strings around into the buffer, which properly handles wide characters (reference to the source code <a href="https://github.com/microsoft/referencesource/blob/master/mscorlib/system/text/stringbuilder.cs#L356">here</a>)<br>Since I use <code>sizeof(char)</code>, I believe that my code should work for UTF16 characters as well, but I haven’t tested it. If I were to optimize string concatenation hotspot, I would probably use the implementation in <code>JoinWithPtrs()</code> as it has shown consistently better performance both with low count of strings to concatenate and high amount.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Performance </tag>
            
            <tag> Optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reasons for C# inlining are (a bit) more complex than you think.</title>
      <link href="/2020/03/07/csharp-inlining-rules/"/>
      <url>/2020/03/07/csharp-inlining-rules/</url>
      
        <content type="html"><![CDATA[<p>The Twitter sometimes can serve as a place of unexpected insights and very interesting technical questions! For example, the question asked in a tweet here: <a href="https://twitter.com/EgorBo/status/1236324907723771904">https://twitter.com/EgorBo/status/1236324907723771904</a></p><p>Apparently, in the following code, C# compiler will inline <code>Test1</code> and not <code>Test2</code>  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">C</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Validate(<span class="number">42</span>, <span class="number">42</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test2</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Validate(a, b);</span><br><span class="line">    &#125;      </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Validate</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span> || b == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;a or b == 0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I knew that C# can inline some methods by using various heuristics, but never had the opportunity to know exactly <em>why</em>. That is why I was excited to take a look at the <a href="https://github.com/dotnet/runtime/blob/master/src/coreclr/src/jit/inlinepolicy.cpp#L658-L659">link the .Net Core source</a> the original tweet poster provided. Apparently, passing constant arguments that are then used in a conditional statement (brfalse and brtrue IL commands), increases the <em>profitability</em> of the method beeing inlined.<br>Browsing the code in <code>*inlinepolicy.cpp*</code> was extremely enlightening. The reason above might not be enough for .Net to inline the method; it merely increases the chance it would be inlined. There is much more to this: the source file has many descriptions of various code use-cases that would increase “profitability” for the Jit to inline. For example, the <a href="https://github.com/dotnet/runtime/blob/master/src/coreclr/src/jit/inlinepolicy.cpp#L684">frequency of calls to the method</a> would increase the chances.<br>Overall, all sorts of intersting things can be learned from browsing the source code of .Net Core - for example, if IL size of the method is 16 bytes or less, it will be always inlined. (the constant can be seen <a href="https://github.com/dotnet/runtime/blob/6dd6b6cc9a60768cf96235a5990bec4894e9106c/src/coreclr/src/jit/inline.h#L902">here</a> and its usage in code <a href="https://github.com/dotnet/runtime/blob/6dd6b6cc9a60768cf96235a5990bec4894e9106c/src/coreclr/src/jit/inlinepolicy.cpp#L513">here</a>)</p><p>In his book “Functional Thinking: Paradigm Over Syntax”, Neal Ford said <em>Always understand one level below your normal abstraction layer.</em><br>This is one of those cases, in my opinion. Understanding when and why CLR Jit inlines methods is not really required to write functioning code, but knowing at least a thing on when inlining happens <em>will</em> give you an edge when you are writing high perf code. There are good reasons why C# JIT doesn’t inline everything; writing inline-able code can give very nice performance boost (as method calls are expensive).</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Local variables vs properties. No suprises here?</title>
      <link href="/2020/03/03/localvar-vs-property/"/>
      <url>/2020/03/03/localvar-vs-property/</url>
      
        <content type="html"><![CDATA[<p>Can the benchmark that compares array iteration vs. pointer based iteration be optimized further? Yep!<br>In a post I wrote earlier about <a href="http://www.graymatterdeveloper.com/2020/02/23/arrays-vs-pointers/">performance comparison between array access with pointers and the usual C#’s  way</a>, I saw an interesting comment that suggested a way to squeeze some more performance out of the scenario.<br>Using a local variable instead of a call to a property (which is in fact a method call) made sense, though I wondered, just how <em>much</em> of a performance boost it would provide.<br>So I decided to test it. The results turned out to be very… interesting. But before taking a look at the results, here is the test code: </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Params(512, 1024, 4 * 1024, 8 * 1024, 16 * 1024, 32 * 1024, 64 * 1024)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">long</span>[] Array;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IterationSetup</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span> =&gt; Array = <span class="keyword">new</span> <span class="built_in">long</span>[Size];</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MethodImpl(MethodImplOptions.NoInlining)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetSize</span>()</span> =&gt; Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new test method</span></span><br><span class="line">    [<span class="meta">Benchmark(Baseline = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IterateArrayWithLocalVar</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> size = Size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            Array[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IterateArray</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Size; i++)</span><br><span class="line">            Array[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IterateArrayWithBoundaryChecks</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//try and fool the JIT into NOT removing array boundary checks</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; GetSize(); i++)</span><br><span class="line">            Array[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">IterateArrayWithPtr</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">fixed</span> (<span class="built_in">long</span>* ptr = Array)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Size; i++)</span><br><span class="line">                *(ptr + i) = i; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new test method</span></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">IterateArrayWithPtrLocalVar</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">fixed</span> (<span class="built_in">long</span>* ptr = Array)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> size = Size;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++) </span><br><span class="line">                *(ptr + i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; BenchmarkRunner.Run&lt;Program&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are the results of the test:</p><table><thead><tr><th>Method</th><th>Size</th><th align="right">Mean</th><th align="right">Error</th><th align="right">StdDev</th><th align="right">Median</th><th align="right">Ratio</th><th align="right">RatioSD</th></tr></thead><tbody><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>256</strong></td><td align="right"><strong>215.6 ns</strong></td><td align="right"><strong>30.72 ns</strong></td><td align="right"><strong>88.65 ns</strong></td><td align="right"><strong>200.0 ns</strong></td><td align="right"><strong>?</strong></td><td align="right"><strong>?</strong></td></tr><tr><td>IterateArray</td><td>256</td><td align="right">200.0 ns</td><td align="right">0.00 ns</td><td align="right">0.00 ns</td><td align="right">200.0 ns</td><td align="right">?</td><td align="right">?</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>256</td><td align="right">1,081.2 ns</td><td align="right">26.49 ns</td><td align="right">61.40 ns</td><td align="right">1,050.0 ns</td><td align="right">?</td><td align="right">?</td></tr><tr><td>IterateArrayWithPtr</td><td>256</td><td align="right">243.3 ns</td><td align="right">23.29 ns</td><td align="right">67.56 ns</td><td align="right">200.0 ns</td><td align="right">?</td><td align="right">?</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>256</td><td align="right">214.3 ns</td><td align="right">20.88 ns</td><td align="right">60.92 ns</td><td align="right">200.0 ns</td><td align="right">?</td><td align="right">?</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>512</strong></td><td align="right"><strong>272.8 ns</strong></td><td align="right"><strong>16.99 ns</strong></td><td align="right"><strong>44.76 ns</strong></td><td align="right"><strong>300.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArray</td><td>512</td><td align="right">342.6 ns</td><td align="right">21.50 ns</td><td align="right">61.33 ns</td><td align="right">300.0 ns</td><td align="right">1.32</td><td align="right">0.37</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>512</td><td align="right">4,942.9 ns</td><td align="right">96.07 ns</td><td align="right">85.16 ns</td><td align="right">4,950.0 ns</td><td align="right">19.43</td><td align="right">4.17</td></tr><tr><td>IterateArrayWithPtr</td><td>512</td><td align="right">372.8 ns</td><td align="right">20.43 ns</td><td align="right">57.61 ns</td><td align="right">400.0 ns</td><td align="right">1.42</td><td align="right">0.37</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>512</td><td align="right">367.7 ns</td><td align="right">22.20 ns</td><td align="right">64.06 ns</td><td align="right">400.0 ns</td><td align="right">1.40</td><td align="right">0.38</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>1024</strong></td><td align="right"><strong>558.3 ns</strong></td><td align="right"><strong>22.30 ns</strong></td><td align="right"><strong>64.35 ns</strong></td><td align="right"><strong>600.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArray</td><td>1024</td><td align="right">578.2 ns</td><td align="right">16.10 ns</td><td align="right">41.55 ns</td><td align="right">600.0 ns</td><td align="right">1.05</td><td align="right">0.14</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>1024</td><td align="right">4,037.5 ns</td><td align="right">84.28 ns</td><td align="right">109.59 ns</td><td align="right">4,000.0 ns</td><td align="right">7.36</td><td align="right">0.79</td></tr><tr><td>IterateArrayWithPtr</td><td>1024</td><td align="right">313.6 ns</td><td align="right">27.62 ns</td><td align="right">76.08 ns</td><td align="right">300.0 ns</td><td align="right">0.57</td><td align="right">0.16</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>1024</td><td align="right">667.1 ns</td><td align="right">18.58 ns</td><td align="right">47.30 ns</td><td align="right">700.0 ns</td><td align="right">1.21</td><td align="right">0.16</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>4096</strong></td><td align="right"><strong>2,118.9 ns</strong></td><td align="right"><strong>45.70 ns</strong></td><td align="right"><strong>77.60 ns</strong></td><td align="right"><strong>2,100.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArray</td><td>4096</td><td align="right">1,935.2 ns</td><td align="right">51.41 ns</td><td align="right">108.43 ns</td><td align="right">1,900.0 ns</td><td align="right">0.91</td><td align="right">0.08</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>4096</td><td align="right">15,557.1 ns</td><td align="right">308.82 ns</td><td align="right">273.76 ns</td><td align="right">15,400.0 ns</td><td align="right">7.27</td><td align="right">0.31</td></tr><tr><td>IterateArrayWithPtr</td><td>4096</td><td align="right">2,475.7 ns</td><td align="right">52.68 ns</td><td align="right">89.46 ns</td><td align="right">2,500.0 ns</td><td align="right">1.17</td><td align="right">0.05</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>4096</td><td align="right">2,413.8 ns</td><td align="right">53.86 ns</td><td align="right">78.94 ns</td><td align="right">2,400.0 ns</td><td align="right">1.14</td><td align="right">0.06</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>8192</strong></td><td align="right"><strong>4,050.0 ns</strong></td><td align="right"><strong>84.81 ns</strong></td><td align="right"><strong>90.75 ns</strong></td><td align="right"><strong>4,050.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArray</td><td>8192</td><td align="right">9,935.7 ns</td><td align="right">152.36 ns</td><td align="right">135.06 ns</td><td align="right">9,950.0 ns</td><td align="right">2.46</td><td align="right">0.08</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>8192</td><td align="right">33,253.3 ns</td><td align="right">3,421.63 ns</td><td align="right">5,121.34 ns</td><td align="right">31,250.0 ns</td><td align="right">8.25</td><td align="right">1.28</td></tr><tr><td>IterateArrayWithPtr</td><td>8192</td><td align="right">4,780.8 ns</td><td align="right">75.50 ns</td><td align="right">63.04 ns</td><td align="right">4,750.0 ns</td><td align="right">1.18</td><td align="right">0.04</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>8192</td><td align="right">4,813.6 ns</td><td align="right">101.79 ns</td><td align="right">191.19 ns</td><td align="right">4,800.0 ns</td><td align="right">1.18</td><td align="right">0.06</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>16384</strong></td><td align="right"><strong>8,158.3 ns</strong></td><td align="right"><strong>149.15 ns</strong></td><td align="right"><strong>116.45 ns</strong></td><td align="right"><strong>8,100.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArray</td><td>16384</td><td align="right">8,200.0 ns</td><td align="right">166.60 ns</td><td align="right">155.84 ns</td><td align="right">8,200.0 ns</td><td align="right">1.01</td><td align="right">0.02</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>16384</td><td align="right">69,796.8 ns</td><td align="right">4,058.70 ns</td><td align="right">11,579.70 ns</td><td align="right">62,650.0 ns</td><td align="right">8.56</td><td align="right">1.31</td></tr><tr><td>IterateArrayWithPtr</td><td>16384</td><td align="right">10,777.0 ns</td><td align="right">1,089.97 ns</td><td align="right">2,460.24 ns</td><td align="right">9,700.0 ns</td><td align="right">1.27</td><td align="right">0.27</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>16384</td><td align="right">12,319.8 ns</td><td align="right">1,417.59 ns</td><td align="right">4,090.08 ns</td><td align="right">9,700.0 ns</td><td align="right">1.49</td><td align="right">0.60</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>32768</strong></td><td align="right"><strong>16,333.3 ns</strong></td><td align="right"><strong>443.18 ns</strong></td><td align="right"><strong>527.57 ns</strong></td><td align="right"><strong>16,300.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArray</td><td>32768</td><td align="right">16,937.5 ns</td><td align="right">1,494.17 ns</td><td align="right">1,942.84 ns</td><td align="right">16,500.0 ns</td><td align="right">1.04</td><td align="right">0.13</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>32768</td><td align="right">187,506.0 ns</td><td align="right">26,906.30 ns</td><td align="right">79,333.84 ns</td><td align="right">144,100.0 ns</td><td align="right">19.13</td><td align="right">1.95</td></tr><tr><td>IterateArrayWithPtr</td><td>32768</td><td align="right">24,892.8 ns</td><td align="right">2,918.12 ns</td><td align="right">8,465.99 ns</td><td align="right">19,400.0 ns</td><td align="right">1.64</td><td align="right">0.58</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>32768</td><td align="right">18,850.0 ns</td><td align="right">338.88 ns</td><td align="right">264.58 ns</td><td align="right">18,700.0 ns</td><td align="right">1.15</td><td align="right">0.05</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArrayWithLocalVar</strong></td><td><strong>65536</strong></td><td align="right"><strong>83,671.0 ns</strong></td><td align="right"><strong>16,469.96 ns</strong></td><td align="right"><strong>48,562.04 ns</strong></td><td align="right"><strong>91,300.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArray</td><td>65536</td><td align="right">131,365.0 ns</td><td align="right">28,646.45 ns</td><td align="right">84,464.72 ns</td><td align="right">104,050.0 ns</td><td align="right">1.68</td><td align="right">0.75</td></tr><tr><td>IterateArrayWithBoundaryChecks</td><td>65536</td><td align="right">328,035.1 ns</td><td align="right">20,180.46 ns</td><td align="right">58,547.17 ns</td><td align="right">328,400.0 ns</td><td align="right">5.68</td><td align="right">3.60</td></tr><tr><td>IterateArrayWithPtr</td><td>65536</td><td align="right">89,072.4 ns</td><td align="right">17,466.58 ns</td><td align="right">50,950.85 ns</td><td align="right">75,300.0 ns</td><td align="right">1.16</td><td align="right">0.48</td></tr><tr><td>IterateArrayWithPtrLocalVar</td><td>65536</td><td align="right">83,553.0 ns</td><td align="right">15,204.40 ns</td><td align="right">44,830.51 ns</td><td align="right">96,700.0 ns</td><td align="right">1.08</td><td align="right">0.33</td></tr></tbody></table><p>Using a local variable for the <code>for</code> loop <em>tends</em> to be faster, but not by much. Single-digit percentages at best. But notice that it doesn’t happen in all cases. The case for 256 items is too fast for accurate measurement, so we can discard it. There is also a couple of cases where usage of local variable is less performant than using a property, which is a bit surprising and probably warrants some more investigation - I’d expect the results to be more consistent.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Performance </tag>
            
            <tag> Optimization </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is it faster to access arrays with pointer arithmetics?</title>
      <link href="/2020/02/23/arrays-vs-pointers/"/>
      <url>/2020/02/23/arrays-vs-pointers/</url>
      
        <content type="html"><![CDATA[<p>After seeing the results of my <a href="/2020/02/17/data-locality/">previous post</a> where I tested performance impact of data locality, one of my collegues theorized that perhaps the huge difference between C++ and C# performance (assuming adjacent memory iteration) is due to boundary checks of C# arrays - he said that if I would use pointers to access arrays, the code will be much faster. I was curious if he was right, so I tested it.</p><h2 id="The-test"><a href="#The-test" class="headerlink" title="The test"></a>The test</h2><p>I used the following test to try and see how much performance usage of pointers over simple C# arrays would yield.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DisassemblyDiagnoser(printSource: true, printDiff: true, printIL: true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Params(64, 512, 1024, 4 * 1024, 8 * 1024, 16 * 1024, 32 * 1024, 64 * 1024)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">long</span>[] Array;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IterationSetup</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span> =&gt; Array = <span class="keyword">new</span> <span class="built_in">long</span>[Size];</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark(Baseline = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IterateArray</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Size; i++)</span><br><span class="line">            Array[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">IterateArrayWithPtr</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">fixed</span> (<span class="built_in">long</span>* ptr = Array)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Size; i++)</span><br><span class="line">                *(ptr + i) = i; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; BenchmarkRunner.Run&lt;Program&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Results"><a href="#The-Results" class="headerlink" title="The Results"></a>The Results</h2><p>The results were a bit surprising (at least to me!)<br>I expected pointer access to be slightly faster, but apparently,it is not so (and sometimes pointer usage is a bit slower!)</p><table><thead><tr><th>Method</th><th>Size</th><th align="right">Mean</th><th align="right">Error</th><th align="right">StdDev</th><th align="right">Median</th><th align="right">Ratio</th><th align="right">RatioSD</th></tr></thead><tbody><tr><td><strong>IterateArray</strong></td><td><strong>64</strong></td><td align="right"><strong>84.34 ns</strong></td><td align="right"><strong>13.70 ns</strong></td><td align="right"><strong>36.57 ns</strong></td><td align="right"><strong>100.0 ns</strong></td><td align="right"><strong>?</strong></td><td align="right"><strong>?</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>64</td><td align="right">104.55 ns</td><td align="right">17.06 ns</td><td align="right">50.05 ns</td><td align="right">150.0 ns</td><td align="right">?</td><td align="right">?</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>512</strong></td><td align="right"><strong>386.59 ns</strong></td><td align="right"><strong>12.93 ns</strong></td><td align="right"><strong>34.29 ns</strong></td><td align="right"><strong>400.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>512</td><td align="right">380.21 ns</td><td align="right">13.88 ns</td><td align="right">40.05 ns</td><td align="right">400.0 ns</td><td align="right">1.00</td><td align="right">0.16</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>1024</strong></td><td align="right"><strong>577.00 ns</strong></td><td align="right"><strong>19.79 ns</strong></td><td align="right"><strong>58.35 ns</strong></td><td align="right"><strong>600.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>1024</td><td align="right">571.00 ns</td><td align="right">16.20 ns</td><td align="right">47.77 ns</td><td align="right">600.0 ns</td><td align="right">1.00</td><td align="right">0.13</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>4096</strong></td><td align="right"><strong>2,229.29 ns</strong></td><td align="right"><strong>51.38 ns</strong></td><td align="right"><strong>150.68 ns</strong></td><td align="right"><strong>2,300.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>4096</td><td align="right">2,263.33 ns</td><td align="right">48.00 ns</td><td align="right">71.84 ns</td><td align="right">2,250.0 ns</td><td align="right">1.03</td><td align="right">0.07</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>8192</strong></td><td align="right"><strong>4,237.89 ns</strong></td><td align="right"><strong>107.75 ns</strong></td><td align="right"><strong>309.14 ns</strong></td><td align="right"><strong>4,400.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>8192</td><td align="right">4,380.00 ns</td><td align="right">82.81 ns</td><td align="right">77.46 ns</td><td align="right">4,400.0 ns</td><td align="right">1.03</td><td align="right">0.07</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>16384</strong></td><td align="right"><strong>8,397.92 ns</strong></td><td align="right"><strong>206.86 ns</strong></td><td align="right"><strong>596.83 ns</strong></td><td align="right"><strong>8,700.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>16384</td><td align="right">8,780.77 ns</td><td align="right">176.57 ns</td><td align="right">241.69 ns</td><td align="right">8,900.0 ns</td><td align="right">1.05</td><td align="right">0.07</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>32768</strong></td><td align="right"><strong>17,067.68 ns</strong></td><td align="right"><strong>416.37 ns</strong></td><td align="right"><strong>1,221.14 ns</strong></td><td align="right"><strong>17,500.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>32768</td><td align="right">17,266.67 ns</td><td align="right">342.07 ns</td><td align="right">319.97 ns</td><td align="right">17,400.0 ns</td><td align="right">1.03</td><td align="right">0.09</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>65536</strong></td><td align="right"><strong>75,184.00 ns</strong></td><td align="right"><strong>14,034.38 ns</strong></td><td align="right"><strong>41,380.68 ns</strong></td><td align="right"><strong>84,750.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td></tr><tr><td>IterateArrayWithPtr</td><td>65536</td><td align="right">77,608.00 ns</td><td align="right">14,190.70 ns</td><td align="right">41,841.60 ns</td><td align="right">93,250.0 ns</td><td align="right">1.06</td><td align="right">0.19</td></tr></tbody></table><h2 id="Conculsion"><a href="#Conculsion" class="headerlink" title="Conculsion"></a>Conculsion</h2><p>Most likely there is more to it, and next I intend to take a look at boundary checks of .Net - how and when the JITter removes/optimizes them (which <em>should</em> happen in some cases, according to SO answers like <a href="https://stackoverflow.com/a/29269531/320103">such as this one</a>). Is it possible that the boundary checks were optimized-away in this case? After some digging, I read through some code in .Net Core sources and found that the JIT optimizes array boundary checks when it can determine <em>statically</em> if the indexer <em>can</em> go out of boundaries of the array.<br>I expanded the existing test, adding some code to fool the JIT into <em>not</em> removing the boundary checks.</p><blockquote><p>If you are curious to read more about the magic CLR arrays do behind the scenes, take a look at <a href="https://mattwarren.org/2017/05/08/Arrays-and-the-CLR-a-Very-Special-Relationship/">Matt Warren’s awesome blog post</a></p></blockquote><h2 id="Second-Test"><a href="#Second-Test" class="headerlink" title="Second Test"></a>Second Test</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DisassemblyDiagnoser(printSource: true, printDiff: true, printIL: true)</span>]</span><br><span class="line">[<span class="meta">HardwareCounters(HardwareCounter.CacheMisses, HardwareCounter.TotalCycles)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Params(64, 512, 1024, 4 * 1024, 8 * 1024, 16 * 1024, 32 * 1024, 64 * 1024)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">long</span>[] Array;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IterationSetup</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span> =&gt; Array = <span class="keyword">new</span> <span class="built_in">long</span>[Size];</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MethodImpl(MethodImplOptions.NoInlining)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetSize</span>()</span> =&gt; Size;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark(Baseline = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IterateArray</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Size; i++)</span><br><span class="line">            Array[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this is the new test method</span></span><br><span class="line">    [<span class="meta">Benchmark()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IterateArrayWithGetSize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//try and fool the JIT into NOT removing array boundary checks</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; GetSize(); i++)</span><br><span class="line">            Array[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">IterateArrayWithPtr</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">fixed</span> (<span class="built_in">long</span>* ptr = Array)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Size; i++)</span><br><span class="line">                *(ptr + i) = i; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; BenchmarkRunner.Run&lt;Program&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Results-1"><a href="#The-Results-1" class="headerlink" title="The Results"></a>The Results</h2><p>The expanded test yielded results which made much more sense. With boundary check, array iteration was noticeably slower, as the results show.</p><table><thead><tr><th>Method</th><th>Size</th><th align="right">Mean</th><th align="right">Error</th><th align="right">StdDev</th><th align="right">Median</th><th align="right">Ratio</th><th align="right">RatioSD</th><th align="right">CacheMisses/Op</th><th align="right">TotalCycles/Op</th></tr></thead><tbody><tr><td><strong>IterateArray</strong></td><td><strong>64</strong></td><td align="right"><strong>65.00 ns</strong></td><td align="right"><strong>19.507 ns</strong></td><td align="right"><strong>57.516 ns</strong></td><td align="right"><strong>100.0 ns</strong></td><td align="right"><strong>?</strong></td><td align="right"><strong>?</strong></td><td align="right"><strong>318</strong></td><td align="right"><strong>-</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>64</td><td align="right">374.07 ns</td><td align="right">16.738 ns</td><td align="right">44.096 ns</td><td align="right">400.0 ns</td><td align="right">?</td><td align="right">?</td><td align="right">930</td><td align="right">438,272</td></tr><tr><td>IterateArrayWithPtr</td><td>64</td><td align="right">100.00 ns</td><td align="right">0.000 ns</td><td align="right">0.000 ns</td><td align="right">100.0 ns</td><td align="right">?</td><td align="right">?</td><td align="right">1,170</td><td align="right">994,093</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>512</strong></td><td align="right"><strong>332.97 ns</strong></td><td align="right"><strong>26.074 ns</strong></td><td align="right"><strong>73.113 ns</strong></td><td align="right"><strong>300.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td><td align="right"><strong>1,187</strong></td><td align="right"><strong>815,994</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>512</td><td align="right">1,927.50 ns</td><td align="right">40.263 ns</td><td align="right">71.567 ns</td><td align="right">1,900.0 ns</td><td align="right">5.86</td><td align="right">1.29</td><td align="right">1,187</td><td align="right">1,076,951</td></tr><tr><td>IterateArrayWithPtr</td><td>512</td><td align="right">356.82 ns</td><td align="right">32.935 ns</td><td align="right">90.713 ns</td><td align="right">350.0 ns</td><td align="right">1.14</td><td align="right">0.42</td><td align="right">1,108</td><td align="right">1,007,022</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>1024</strong></td><td align="right"><strong>783.33 ns</strong></td><td align="right"><strong>49.699 ns</strong></td><td align="right"><strong>143.392 ns</strong></td><td align="right"><strong>700.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td><td align="right"><strong>1,130</strong></td><td align="right"><strong>996,559</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>1024</td><td align="right">3,650.00 ns</td><td align="right">79.925 ns</td><td align="right">124.434 ns</td><td align="right">3,600.0 ns</td><td align="right">4.82</td><td align="right">0.77</td><td align="right">1,084</td><td align="right">1,111,562</td></tr><tr><td>IterateArrayWithPtr</td><td>1024</td><td align="right">721.43 ns</td><td align="right">35.653 ns</td><td align="right">95.780 ns</td><td align="right">700.0 ns</td><td align="right">0.94</td><td align="right">0.21</td><td align="right">1,039</td><td align="right">936,426</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>4096</strong></td><td align="right"><strong>2,526.97 ns</strong></td><td align="right"><strong>141.950 ns</strong></td><td align="right"><strong>393.343 ns</strong></td><td align="right"><strong>2,400.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td><td align="right"><strong>1,193</strong></td><td align="right"><strong>1,111,905</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>4096</td><td align="right">14,144.00 ns</td><td align="right">279.512 ns</td><td align="right">373.140 ns</td><td align="right">14,100.0 ns</td><td align="right">5.75</td><td align="right">0.78</td><td align="right">2,424</td><td align="right">1,127,905</td></tr><tr><td>IterateArrayWithPtr</td><td>4096</td><td align="right">2,632.95 ns</td><td align="right">164.844 ns</td><td align="right">454.030 ns</td><td align="right">2,500.0 ns</td><td align="right">1.07</td><td align="right">0.25</td><td align="right">1,212</td><td align="right">1,135,762</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>8192</strong></td><td align="right"><strong>5,022.09 ns</strong></td><td align="right"><strong>259.323 ns</strong></td><td align="right"><strong>705.508 ns</strong></td><td align="right"><strong>4,800.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td><td align="right"><strong>879</strong></td><td align="right"><strong>403,886</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>8192</td><td align="right">27,765.22 ns</td><td align="right">556.883 ns</td><td align="right">704.278 ns</td><td align="right">27,700.0 ns</td><td align="right">5.55</td><td align="right">0.72</td><td align="right">1,451</td><td align="right">853,976</td></tr><tr><td>IterateArrayWithPtr</td><td>8192</td><td align="right">5,030.43 ns</td><td align="right">310.589 ns</td><td align="right">876.022 ns</td><td align="right">4,600.0 ns</td><td align="right">1.01</td><td align="right">0.23</td><td align="right">883</td><td align="right">450,018</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>16384</strong></td><td align="right"><strong>8,931.40 ns</strong></td><td align="right"><strong>351.262 ns</strong></td><td align="right"><strong>955.635 ns</strong></td><td align="right"><strong>9,100.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td><td align="right"><strong>1,701</strong></td><td align="right"><strong>1,100,102</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>16384</td><td align="right">56,023.53 ns</td><td align="right">966.160 ns</td><td align="right">992.175 ns</td><td align="right">56,100.0 ns</td><td align="right">6.22</td><td align="right">0.74</td><td align="right">2,048</td><td align="right">1,107,106</td></tr><tr><td>IterateArrayWithPtr</td><td>16384</td><td align="right">9,634.88 ns</td><td align="right">603.972 ns</td><td align="right">1,643.151 ns</td><td align="right">8,800.0 ns</td><td align="right">1.10</td><td align="right">0.24</td><td align="right">1,325</td><td align="right">1,026,168</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>32768</strong></td><td align="right"><strong>19,279.79 ns</strong></td><td align="right"><strong>1,193.483 ns</strong></td><td align="right"><strong>3,405.075 ns</strong></td><td align="right"><strong>18,500.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td><td align="right"><strong>1,796</strong></td><td align="right"><strong>894,502</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>32768</td><td align="right">113,073.33 ns</td><td align="right">2,689.117 ns</td><td align="right">7,496.183 ns</td><td align="right">110,750.0 ns</td><td align="right">6.06</td><td align="right">0.98</td><td align="right">1,326</td><td align="right">413,320</td></tr><tr><td>IterateArrayWithPtr</td><td>32768</td><td align="right">18,307.14 ns</td><td align="right">367.433 ns</td><td align="right">671.871 ns</td><td align="right">17,950.0 ns</td><td align="right">1.01</td><td align="right">0.14</td><td align="right">1,491</td><td align="right">604,697</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>IterateArray</strong></td><td><strong>65536</strong></td><td align="right"><strong>81,684.00 ns</strong></td><td align="right"><strong>14,972.693 ns</strong></td><td align="right"><strong>44,147.324 ns</strong></td><td align="right"><strong>99,700.0 ns</strong></td><td align="right"><strong>1.00</strong></td><td align="right"><strong>0.00</strong></td><td align="right"><strong>2,771</strong></td><td align="right"><strong>322,993</strong></td></tr><tr><td>IterateArrayWithGetSize</td><td>65536</td><td align="right">265,269.00 ns</td><td align="right">16,331.343 ns</td><td align="right">48,153.334 ns</td><td align="right">283,250.0 ns</td><td align="right">4.20</td><td align="right">1.99</td><td align="right">1,809</td><td align="right">778,339</td></tr><tr><td>IterateArrayWithPtr</td><td>65536</td><td align="right">84,369.00 ns</td><td align="right">16,073.756 ns</td><td align="right">47,393.832 ns</td><td align="right">92,150.0 ns</td><td align="right">1.07</td><td align="right">0.31</td><td align="right">2,583</td><td align="right">296,627</td></tr></tbody></table><h2 id="Another-Conclusion"><a href="#Another-Conclusion" class="headerlink" title="(Another) Conclusion"></a>(Another) Conclusion</h2><p>The results from the second, expanded test make much more sense; overall, delving this deep into C# internals was an awesome experience :)</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Performance </tag>
            
            <tag> Optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easy way to configure SOS in LLDB</title>
      <link href="/2020/02/18/lldb-convenient-sos/"/>
      <url>/2020/02/18/lldb-convenient-sos/</url>
      
        <content type="html"><![CDATA[<p>I don’t have much experience in using <a href="https://lldb.llvm.org/">LLDB</a> to debug .Net Core, so when I stumbled upon this little gem while looking at <a href="https://github.com/dotnet/diagnostics/tree/master/src/Tools">dotnet/diagnostics GitHub repository</a>, I was instantly curious to try it: up to this point, in order to load the <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension">SOS plugin</a>, I had to manually look up its folder, then specify it inside LLDB (via the <code>load plugin</code> command).<br>This tool, however, should configure LLDB to load SOS plugin automatically!<br>How? First install the tool via .Net Core CLI:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install -g dotnet-sos</span><br></pre></td></tr></table></figure><p>Then use the tool to configure SOS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet sos install</span><br></pre></td></tr></table></figure><p>After running the second command, you’d see something like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Installing SOS to /home/michael/.dotnet/sos from /home/michael/.dotnet/tools/.store/dotnet-sos/3.1.57502/dotnet-sos/3.1.57502/tools/netcoreapp2.1/any/linux-x64</span><br><span class="line">Creating installation directory...</span><br><span class="line">Copying files...</span><br><span class="line">Creating new /home/michael/.lldbinit file - LLDB will load SOS automatically at startup</span><br><span class="line">SOS install succeeded</span><br></pre></td></tr></table></figure><p>That’s it. And it is awesome that Microsoft goes this far to create better developer experience, I think.</p>]]></content>
      
      
      <categories>
          
          <category> Debugging </category>
          
          <category> Post-mortem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Debugging </tag>
            
            <tag> LLDB </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sequential memory access is... faster?</title>
      <link href="/2020/02/17/data-locality/"/>
      <url>/2020/02/17/data-locality/</url>
      
        <content type="html"><![CDATA[<p>In gamedev articles about Entity-Component-System, data locality is often mentioned as a big reason to use such design pattern. The underlying data structures of the ECS are cache friendly, thus allowing much better performance for iterations of large amount of game objects.<br>I knew that cache-friendly usage of memory (sequential memory access, for example) would yield better performance, but I was curious, how much better it would be?</p><blockquote><p>In case you never heard about Entity-Component-System, <a href="http://gameprogrammingpatterns.com/data-locality.html">this article</a> is a good place to read about it.</p></blockquote><h2 id="The-Tests"><a href="#The-Tests" class="headerlink" title="The Tests"></a>The Tests</h2><p>In order to test that, I decided to benchmark an iteration of 2d array, using C# and C++, using <a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotNet</a> and <a href="https://github.com/google/benchmark">Google Benchmark</a> respectively.</p><p>In C# (running .Net Core 3.1), I used the following test:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> BenchmarkDotNet.Attributes;</span><br><span class="line"><span class="keyword">using</span> BenchmarkDotNet.Running;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetCoreDataLocality</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HardwareCounters(HardwareCounter.CacheMisses)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Params(16, 512, 4096, 16 * 1024)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span>[,] Array2D;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">IterationSetup</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span> =&gt; Array2D = <span class="keyword">new</span> <span class="built_in">long</span>[Size, Size];</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Benchmark</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Iterate2DArrayColumnFirst</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; Size; y++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; Size; x++)</span><br><span class="line">                Array2D[x, y] = x + y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Benchmark</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Iterate2DArrayRowFirst</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; Size; x++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; Size; y++)</span><br><span class="line">                Array2D[x, y] = x + y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; BenchmarkRunner.Run&lt;Program&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>And in C++, I used code as close as possible to C# - I was also curious how the two languages performance would compare</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;benchmark/benchmark.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">array2d_benchmark</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">shared_ptr&lt;vector&lt;vector&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;&gt;&gt; array2d;</span><br><span class="line"><span class="type">int</span> _array_size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">array2d_benchmark</span>(<span class="type">int</span> array_size) : _array_size(array_size)</span><br><span class="line">&#123;</span><br><span class="line">array2d = make_shared&lt;vector&lt;vector&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;&gt;&gt;(array_size , <span class="built_in">vector</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt; (array_size, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">benchmark_column_first</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y = <span class="number">0</span>; y &lt; _array_size; y++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x = <span class="number">0</span>; x &lt; _array_size; x++)</span><br><span class="line">(*array2d)[x][y] = x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">benchmark_row_first</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x = <span class="number">0</span>; x &lt; _array_size; x++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y = <span class="number">0</span>; y &lt; _array_size; y++)</span><br><span class="line">(*array2d)[x][y] = x + y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">benchmark_array2d_column_first</span><span class="params">(benchmark::State&amp; state)</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="type">const</span> array2d_benchmark <span class="title">benchmark</span><span class="params">(state.range_x())</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> _ : state) &#123;</span><br><span class="line">    benchmark.<span class="built_in">benchmark_column_first</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">benchmark_array2d_row_first</span><span class="params">(benchmark::State&amp; state)</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="type">const</span> array2d_benchmark <span class="title">benchmark</span><span class="params">(state.range_x())</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> _ : state) &#123;</span><br><span class="line">    benchmark.<span class="built_in">benchmark_row_first</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//16, 512, 4096, 16 * 1024</span></span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_column_first)-&gt;<span class="built_in">Arg</span>(<span class="number">16</span>);</span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_column_first)-&gt;<span class="built_in">Arg</span>(<span class="number">512</span>);</span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_column_first)-&gt;<span class="built_in">Arg</span>(<span class="number">4096</span>);</span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_column_first)-&gt;<span class="built_in">Arg</span>(<span class="number">16</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_row_first)-&gt;<span class="built_in">Arg</span>(<span class="number">16</span>);</span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_row_first)-&gt;<span class="built_in">Arg</span>(<span class="number">512</span>);</span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_row_first)-&gt;<span class="built_in">Arg</span>(<span class="number">4096</span>);</span><br><span class="line"><span class="built_in">BENCHMARK</span>(benchmark_array2d_row_first)-&gt;<span class="built_in">Arg</span>(<span class="number">16</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">BENCHMARK_MAIN</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="The-Results"><a href="#The-Results" class="headerlink" title="The Results"></a>The Results</h2><p>The results were more interesting than I anticipated.</p><p>For C#, I got:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|                    Method |  Size |               Mean |             Error |            StdDev |             Median | CacheMisses/Op |</span><br><span class="line">|-------------------------- |------ |-------------------:|------------------:|------------------:|-------------------:|---------------:|</span><br><span class="line">| Iterate2DArrayColumnFirst |    16 |           469.1 ns |          18.64 ns |          49.10 ns |           500.0 ns |            340 |</span><br><span class="line">|    Iterate2DArrayRowFirst |    16 |           482.0 ns |          26.13 ns |          77.04 ns |           500.0 ns |            455 |</span><br><span class="line">| Iterate2DArrayColumnFirst |   512 |     1,218,714.3 ns |     112,811.61 ns |     329,076.75 ns |     1,156,900.0 ns |         12,545 |</span><br><span class="line">|    Iterate2DArrayRowFirst |   512 |       583,742.0 ns |      61,619.35 ns |     181,686.04 ns |       636,450.0 ns |          2,157 |</span><br><span class="line">| Iterate2DArrayColumnFirst |  4096 |   197,656,800.0 ns |   3,124,528.79 ns |   2,922,686.17 ns |   198,075,200.0 ns |      6,301,816 |</span><br><span class="line">|    Iterate2DArrayRowFirst |  4096 |    54,081,651.9 ns |   1,063,472.59 ns |   2,196,255.32 ns |    53,712,750.0 ns |        259,819 |</span><br><span class="line">| Iterate2DArrayColumnFirst | 16384 | 5,995,155,895.9 ns | 324,258,680.47 ns | 945,877,790.80 ns | 5,567,680,450.0 ns |    150,143,526 |</span><br><span class="line">|    Iterate2DArrayRowFirst | 16384 |   820,319,993.3 ns |   5,415,915.82 ns |   5,066,051.02 ns |   818,728,000.0 ns |      3,783,339 |</span><br></pre></td></tr></table></figure><blockquote><p>Notice the last <code>CacheMisses/Op</code> column - it highlights the effect of data locality on performance</p></blockquote><p>For C++, I got:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------------</span><br><span class="line">Benchmark                                     Time           CPU Iterations</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">benchmark_array2d_column_first/16           234 ns        231 ns    3446154</span><br><span class="line">benchmark_array2d_column_first/512       496207 ns     488281 ns       1120</span><br><span class="line">benchmark_array2d_column_first/4096   181828000 ns  179687500 ns          4</span><br><span class="line">benchmark_array2d_column_first/16384 4868694600 ns 4859375000 ns          1</span><br><span class="line">benchmark_array2d_row_first/16              210 ns        210 ns    3200000</span><br><span class="line">benchmark_array2d_row_first/512          197220 ns     196725 ns       3733</span><br><span class="line">benchmark_array2d_row_first/4096       13954918 ns   13750000 ns         50</span><br><span class="line">benchmark_array2d_row_first/16384     213235700 ns  213541667 ns          3</span><br></pre></td></tr></table></figure><p>Unsurprisingly, for “row-first” iterations the performance was much better, because the memory access in this case is sequential, thus allowing much less cache misses, as can be seen from C# benchmark (really awesome feature of BenchmarkDotNet!)<br>What <em>did</em> surprise me is how much faster the sequential memory access in fact is, even for such a simple use-case. For 16384x16384 arrays, in C# it is x7 running time improvement and for C++ it is approximately x22 improvement!</p><p>Also, the run-time difference between C++ and C# in case of row-first iteration for 16384x16384 arrays is almost x3 - much more than I expected. Overall, this was an interesting experiment that proved to me the value of Entity-Component-System as a performance optimization. Next step would probably be to test how much C#’s array boundary checks affect the performance and check if C++ code benefits from automatic vectorization (which it probably does!)</p><blockquote><p>If you are interested to play around with the code, you can find it in <a href="https://github.com/myarichuk/DataLocalityBenchmarks">its repository</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Performance </tag>
            
            <tag> Optimization </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nice little gotcha when loading SOS after launching .Net executable</title>
      <link href="/2020/02/14/windbg-launch-net-executable/"/>
      <url>/2020/02/14/windbg-launch-net-executable/</url>
      
        <content type="html"><![CDATA[<p>When you launch .Net executable with WinDBG, in order to “catch” something nasty like <code>AccessViolationExcetion</code>, the application will stop after loading with a “debugger break”, and you will see something like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(6b8.37dc): Break instruction exception - code 80000003 (first chance)</span><br><span class="line">ntdll!LdrpDoDebuggerBreak+0x30:</span><br><span class="line">00007ffc`391d121c cc              int     3</span><br></pre></td></tr></table></figure><p>At this point, if you try to load SOS, you will see an error.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; .loadby sos coreclr</span><br><span class="line">Unable to find module &#x27;coreclr&#x27;</span><br></pre></td></tr></table></figure><p>This happens because CLR is not loaded yet; the following command will make sure that WinDBG will stop as soon as .Net is loaded.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sxe ld clrjit</span><br></pre></td></tr></table></figure><p>So, the whole procedure will look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; .loadby sos coreclr</span><br><span class="line">Unable to find module &#x27;coreclr&#x27;</span><br><span class="line">CommandLine: </span><br><span class="line">Cannot execute &#x27;&#x27;, Win32 error 0n87</span><br><span class="line">    &quot;The parameter is incorrect.&quot;</span><br><span class="line">0:000&gt; sxe ld clrjit</span><br><span class="line">0:000&gt; g</span><br><span class="line">ModLoad: 00007ffc`372d0000 00007ffc`372fe000   C:\WINDOWS\System32\IMM32.DLL</span><br><span class="line">ModLoad: 00007ffc`214c0000 00007ffc`21554000   C:\Program Files\dotnet\host\fxr\3.1.1\hostfxr.dll</span><br><span class="line">ModLoad: 00007ffc`21420000 00007ffc`214b2000   C:\Program Files\dotnet\shared\Microsoft.NETCore.App\3.1.1\hostpolicy.dll</span><br><span class="line">ModLoad: 00007ffb`d8060000 00007ffb`d85cb000   C:\Program Files\dotnet\shared\Microsoft.NETCore.App\3.1.1\coreclr.dll</span><br><span class="line">ModLoad: 00007ffc`376f0000 00007ffc`37846000   C:\WINDOWS\System32\ole32.dll</span><br><span class="line">ModLoad: 00007ffc`37860000 00007ffc`37924000   C:\WINDOWS\System32\OLEAUT32.dll</span><br><span class="line">ModLoad: 00007ffc`36e30000 00007ffc`36e56000   C:\WINDOWS\System32\bcrypt.dll</span><br><span class="line">(6b8.37dc): Unknown exception - code 04242420 (first chance)</span><br><span class="line">ModLoad: 00007ffb`b5800000 00007ffb`b611d000   C:\Program Files\dotnet\shared\Microsoft.NETCore.App\3.1.1\System.Private.CoreLib.dll</span><br><span class="line">ModLoad: 00007ffc`212d0000 00007ffc`21412000   C:\Program Files\dotnet\shared\Microsoft.NETCore.App\3.1.1\clrjit.dll</span><br><span class="line">ntdll!NtMapViewOfSection+0x14:</span><br><span class="line">00007ffc`3919c5c4 c3              ret</span><br></pre></td></tr></table></figure><p>At this point, running <code>.loadby sos coreclr</code> will work, because the CLR is already loaded at this point.</p><blockquote><p>When running <code>.loadby</code> commands, the absense of output is an indicator of success. Only if the commands fails, you will see an error.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debugging </tag>
            
            <tag> WinDBG </tag>
            
            <tag> .Net </tag>
            
            <tag> Gotcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setting up WinDBG for analyzing memory dumps</title>
      <link href="/2020/02/12/setting-up-windbg/"/>
      <url>/2020/02/12/setting-up-windbg/</url>
      
        <content type="html"><![CDATA[<p>When I needed to investigate a memory dump for a first time, I stared at WinDBG window, not knowing how to begin. My google-fu yielded mixed results - I had to sift through lots of information, sometimes incorrect, sometimes outdated, only after some experimentation, I was able to actually understand what was going on.<br>Though, in a hindsight, WinDBG is much less complex than it seemed in the first place. </p><h2 id="A-word-or-three-on-WinDBG"><a href="#A-word-or-three-on-WinDBG" class="headerlink" title="A word (or three) on WinDBG"></a>A word (or three) on WinDBG</h2><p>WinDBG wikipedia article states that <em>WinDbg is a multipurpose debugger for the Microsoft Windows computer operating system, distributed by Microsoft</em><br>That is nice, but what does it <em>mean</em>?  </p><p>Essentially, WinDBG provides a GUI and a CLI for a debugging engine (defined in DbgEng.dll) that comes as part of <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">Debugging Tools for Windows</a>, an engine that can debug both user-mode and kernel-mode code. As far as I know, WinDBG is also used to develop Windows itself by Microsoft devs, it is a low-level debugger without all the bells and whistles of Visual Studio, but it is very very powerful.</p><blockquote><p>Why CLI? Because most of the interaction with the “debugee” will be done using text commands typed in WinDBG command propmpt. </p></blockquote><p>By the way, there are more debuggers that share the same engine - <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugging-using-cdb-and-ntsd">CDB</a> for user-mode debugging and <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugging-using-kd-and-ntkd">KDB</a> for kernel-mode debugging. The only different between CDB, KDB and WinDBG is that CDB/KDB are console only and can debug only user-mode and kernel-mode respectively, while WinDBG has UI and can be used to debug both modes.</p><blockquote><p>In case all of this new to you, kernel-mode debugging means that you debug operating systems and drivers, and user-mode debugging means you debug regular programs that run within OS</p></blockquote><h2 id="First-Steps"><a href="#First-Steps" class="headerlink" title="First Steps"></a>First Steps</h2><p>Since we are talking about analyzing a memory dump, the first step would be to actually get a memory dump, which is essentially a snapshot of all that the process contains, things like thread information, allocated memory etc. This can be done via multiple tools, but personally, I usually use <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer">Sysinternals Process Explorer</a><br>Simply select the process you’d like to take a memory dump of, right click and… that’s it.<br><img src="process-explorer.png" alt="Process Explorer"></p><blockquote><p>Mini-dumps are very small and contain <em>only</em> information about threads and full dumps contain pretty much everything, their size is much larger, of course.</p></blockquote><p>Now that we have a dump, we need to open it. WinDBG is a part of <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">Debugging Tools for Windows</a> as well, but I would recommend using <a href="https://www.microsoft.com/en-us/p/windbg-preview/9pgjgd53tn86?activetab=pivot:overviewtab">WinDBG Preview version</a> - which has the same features as “original” WinDBG, is quite stable and has much better performance (it utilizes multiple CPU cores, unlike the “original”).</p><h2 id="The-dump-is-opened-now-what"><a href="#The-dump-is-opened-now-what" class="headerlink" title="The dump is opened, now what?"></a>The dump is opened, now what?</h2><p>First, we need to properly setup PDB file sources. The idea is to provide a local cache for symbol files and supply symbol server addresses for both Microsoft system libraries and other symbol servers.</p><blockquote><p>If you are not sure <em>what</em> PDB files are, take a look at the article “<a href="https://www.wintellect.com/pdb-files-what-every-developer-must-know">PDB Files: What Every Developer Must Know</a>“. </p></blockquote><p>In order to configure PDB sources, you need to specify them in a symbol server search path format. This can be done either in WinDBG GUI or by setting <code>_NT_SYMBOL_PATH</code> environment variable.<br>For example, on my dev machine, it looks like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache*e:\Symbols;srv*e:\Symbols*https://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure><p>The format is <code>cache*[local cache folder 1]*[local cache folder 2];srv*[local cache folder]*[symbol server path]</code></p><p>What if symbols are missing or there is an issue? In this case, use <code>!sym noisy on</code> command to see what symbols are missing and where WinDBG tries to look for them - after this command, each operation that requires symbols would print information on where they were found.<br>Notice how after executing a <code>!threads</code> command, WinDBG outputs where did if looks for .Net Core symbols.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !sym noisy on</span><br><span class="line">noisy mode - symbol prompts on</span><br><span class="line">0:000&gt; !threads</span><br><span class="line">SYMSRV:  BYINDEX: 0x2</span><br><span class="line">         e:\symbols</span><br><span class="line">         coreclr.pdb</span><br><span class="line">         38DDCD021DAD44F5831B9DB6C0C69E9B1</span><br><span class="line">SYMSRV:  PATH: e:\symbols\coreclr.pdb\38DDCD021DAD44F5831B9DB6C0C69E9B1\coreclr.pdb</span><br><span class="line">SYMSRV:  RESULT: 0x00000000</span><br><span class="line">DBGHELP: coreclr - private symbols &amp; lines </span><br><span class="line">        e:\symbols\coreclr.pdb\38DDCD021DAD44F5831B9DB6C0C69E9B1\coreclr.pdb</span><br><span class="line">ThreadCount:      3</span><br><span class="line">UnstartedThread:  0</span><br><span class="line">BackgroundThread: 3</span><br><span class="line">PendingThread:    0</span><br><span class="line">DeadThread:       0</span><br><span class="line">Hosted Runtime:   no</span><br><span class="line">                                                                                                        Lock  </span><br><span class="line"> DBG   ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception</span><br><span class="line">   0    1 3b24 000002321A5A6580    20220 Preemptive  000002321C1E1680:000002321C1E1FD0 000002321a59b9c0 0     Ukn </span><br><span class="line">   4    2 1be0 000002321A6576F0    2b220 Preemptive  0000000000000000:0000000000000000 000002321a59b9c0 0     MTA (Finalizer) </span><br><span class="line">   6    3 40e8 000002321A65D840  102a220 Preemptive  0000000000000000:0000000000000000 000002321a59b9c0 0     MTA (Threadpool Worker) </span><br></pre></td></tr></table></figure><h2 id="Dump-is-open-and-symbols-are-configured-Now-what"><a href="#Dump-is-open-and-symbols-are-configured-Now-what" class="headerlink" title="Dump is open and symbols are configured. Now what?"></a>Dump is open and symbols are configured. Now what?</h2><p>Thats it. Now, you start debugging!<br>Note that WinDBG is highly extensible, most of its commands are provided by extensions. By default, <code>ext.dll</code> extension gets loaded automatically, but if you have a memory dump of a .Net process, then you will need to use SOS extension (Son of Strike).</p><blockquote><p>commands provided by extensions always have the <code>!</code> prefix</p></blockquote><h2 id="SOS-extension"><a href="#SOS-extension" class="headerlink" title="SOS extension"></a>SOS extension</h2><p>This extensions provides information about .Net internals; it is installed with .NET Framework.</p><p>So, how to load this extension? Simply, run the following command if you want to analyze memory dump taken from full .Net Framework process</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.loadby sos clr</span><br></pre></td></tr></table></figure><p>And if you took the memory dump from .Net Core process, the command would be slightly different/</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.loadby sos coreclr</span><br></pre></td></tr></table></figure><p>However, there is a very annoying gotcha: in order to properly analyze a .Net memory dump, loaded <code>sos.dll</code> must match the exact version of .Net the process ran under (because <code>sos.dll</code> is built as part of the framework)</p><p>In case of version mismatch, you may see an error like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:037&gt; !clrstack</span><br><span class="line">The version of SOS does not match the version of CLR you are debugging.  Please load the matching version of SOS for the version of CLR you are debugging.</span><br><span class="line">CLR Version: 4.0.30319.1</span><br><span class="line">SOS Version: 4.0.30319.235</span><br></pre></td></tr></table></figure><p>If you have this problem, you can either fetch the correct <code>sos.dll</code> from the machine the dump was taken on or use an undocumented behavior described in an awesome blog post: <a href="https://www.wintellect.com/automatically-load-the-right-sos-for-the-minidump/">Automatically Load the Right SOS for the Minidump</a></p><h2 id="SOSEX-extension"><a href="#SOSEX-extension" class="headerlink" title="SOSEX extension"></a>SOSEX extension</h2><p>There is a very useful extension that provides many convenience debugger functions - SOSEX. It can be downloaded from the <a href="http://www.stevestechspot.com/SOSEXV40NowAvailable.aspx">blog of its creator</a>.</p><p>After you download, unzip the <code>dll</code> to some folder, then run the following command in WinDBG (after loading SOS plugin, of course)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.load e:\sosex_64\sosex</span><br></pre></td></tr></table></figure><blockquote><p>Note that the <code>dll</code> filename is written <em>without</em> extension. Also, the “old” WinDBG cannot handle whitespaces in the path well, so you should either use the WinDBG Preview or extract the SOSEX plugin into a path without whitespaces.</p></blockquote><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This is the kind of post I wish I had when I started using WinDBG. Hopefully, you will find it useful.</p>]]></content>
      
      
      <categories>
          
          <category> Debugging </category>
          
          <category> Post-mortem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debugging </tag>
            
            <tag> WinDBG </tag>
            
            <tag> .Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Segmentation faults when using P/Invoke = pointer issues? Not necessarily</title>
      <link href="/2020/01/26/segment-faults-and-gdb/"/>
      <url>/2020/01/26/segment-faults-and-gdb/</url>
      
        <content type="html"><![CDATA[<p>When debugging new <a href="https://ravendb.net/">RavenDB’s</a> 32-bit <a href="https://en.wikipedia.org/wiki/Paging">pager</a> for Linux-based ARM environments, which has platform specific functionality implemented in C and P/Invoked from C# code, I ran into an issue: when starting, RavenDB was throwing a segmentation fault and crashing. Since the C# code didn’t change much, my immediate suspect was some sort of pointer issue in C code, such as trying to dereference a <em>null</em> pointer. </p><h2 id="GDB-is-awesome-for-handling-segfaults"><a href="#GDB-is-awesome-for-handling-segfaults" class="headerlink" title="GDB is awesome for handling segfaults"></a>GDB is awesome for handling segfaults</h2><p>The <a href="https://en.wikipedia.org/wiki/GNU_Debugger">GNU Debugger</a> or GDB is very good at tracing such issues. Let’s see how we can find a segfault source in a small example.<br>Consider the following code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">throw_segment_fault</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* x = <span class="number">0</span>;</span><br><span class="line">*x = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">throw_segment_fault</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, let’s compile this and use GDB to find where the segfault happens:</p><blockquote><p>note that <code>a.out</code> is an executable compiled from <em>segmentFaultThrower.c</em></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc segmentFaultThrower.c</span><br><span class="line">gdb --args ./a.out</span><br></pre></td></tr></table></figure><p>Running GDB with such parameters will yield the following output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class="line">and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from ./a.out...(no debugging symbols found)...done.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>We have now run our application with GDB attached and paused. Executing <code>run</code> command actually starts the program.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /mnt/e/projects/SegmentFaultTests/a.out</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x000000000800060a in throw_segment_fault ()</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>Now running <code>bt</code> command (backtrack) will show the stack trace where the segfault has happened.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#0  0x000000000800060a in throw_segment_fault ()</span><br><span class="line">#1  0x0000000008000621 in main ()</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>This is nice, but GDB can do better! Compiling our application with <code>-g</code> flag, will include debug information into executable.<br>So, if we re-compile with the flag, start GDB and issue <code>run</code> command, we will see the following</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /mnt/e/projects/SegmentFaultTests/a.out</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x000000000800060a in throw_segment_fault () at segmentFaultThrower.c:5</span><br><span class="line">5               *x = 5;</span><br></pre></td></tr></table></figure><p>Running <code>bt</code> will now print source code lines in the stack trace</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#0  0x000000000800060a in throw_segment_fault () at segmentFaultThrower.c:5</span><br><span class="line">#1  0x0000000008000621 in main () at segmentFaultThrower.c:10</span><br></pre></td></tr></table></figure><h2 id="If-segfaults-happen-when-P-Invoking-a-function-it-is-not-necessarily-because-of-null-pointers"><a href="#If-segfaults-happen-when-P-Invoking-a-function-it-is-not-necessarily-because-of-null-pointers" class="headerlink" title="If segfaults happen when P/Invoking a function, it is not necessarily because of null pointers!"></a>If segfaults happen when P/Invoking a function, it is not necessarily because of null pointers!</h2><p>The new 32-bit pager that I mentioned at the beginning, was using P/Invokes to C code that was used to access operating-system APIs, such as memory-mapping related functions. </p><p>I made sure to compile the C library with <code>-g</code> flag and ran RavenDB with GDB attached. I saw the following output (notice the output of <code>bt</code> command):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Thread 1 &quot;Raven.Server&quot; received signal SIGSEGV, Segmentation fault.</span><br><span class="line">rvn_mmap_file (sz=65536, flags=&lt;optimized out&gt;, handle=0x0, offset=9151260362719350484, addr=0xe6f2ebb, detailed_error_code=0x76af562c &lt;vtable for InlinedCallFrame+8&gt;) at src/posix/mapping.c:421</span><br><span class="line">421         *addr = rvn_mmap(NULL, sz, PROT_READ | PROT_WRITE, mmap_flags, mfh-&gt;fd, offset);</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  rvn_mmap_file (sz=65536, flags=&lt;optimized out&gt;, handle=0x0, offset=9151260362719350484, addr=0xe6f2ebb, detailed_error_code=0x76af562c &lt;vtable for InlinedCallFrame+8&gt;) at src/posix/mapping.c:421</span><br><span class="line">#1  0x513da610 in ?? ()</span><br><span class="line">Backtrace stopped: previous frame identical to this frame (corrupt stack?)</span><br></pre></td></tr></table></figure><p>Such output looked weird to me, especially the <em>corrupt stack</em> part, so I looked at the relevant code.<br>The P/Invoke call in C# part looked like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rc = rvn_mmap_file(size, </span><br><span class="line">  _copyOnWriteMode ? MmapOptions.CopyOnWrite : MmapOptions.None, </span><br><span class="line">  _handle, offset, </span><br><span class="line">  <span class="keyword">out</span> <span class="keyword">var</span> startingBaseAddressPtr,</span><br><span class="line">  <span class="keyword">out</span> <span class="keyword">var</span> errorCode);</span><br></pre></td></tr></table></figure><p>In the C part, <code>rvn_mmap_file()</code> signature looks like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">EXPORT <span class="type">int32_t</span> <span class="title">rvn_mmap_file</span><span class="params">(<span class="type">int64_t</span> sz, <span class="type">int64_t</span> flags, <span class="type">void</span> *handle, <span class="type">int64_t</span> offset, <span class="type">void</span> **addr, <span class="type">int32_t</span> *detailed_error_code)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>In this case, <code>int64_t</code> is a typedef for <code>long long</code> and <code>int32_t</code> is a typedef for <code>int</code>.  </p></blockquote><p>The first thing I noticed is that the <code>handle</code> parameter value is 0 (which means <code>null</code> pointer) and the <code>offset</code> parameter has unreasonably large value.<br>In C# code, by the point the <code>rvn_mmap_file()</code> is invoked, <code>_handle</code> is guaranteed to have a value (otherwise the code would have failed earlier). Together with <em>corrupt stack</em> notification from GDB while executing the <code>bt</code> command, I suspected that some offsets are wrong, since the segfault happens when invoking <code>rvn_mmap_file()</code> itself. </p><p>After looking some more at the code, I noticed that the <code>flags</code> parameter is <code>int64_t</code> and the definition of the corresponding flags enum in C# looks like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MmapOptions</span><br><span class="line">&#123;</span><br><span class="line">   None = <span class="number">0</span>,</span><br><span class="line">   CopyOnWrite = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</span><br><span class="line">   DeleteOnClose = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since in C# enums are of <code>System.Int32</code> type, this in fact was the issue. The fix was simply to change the <code>flags</code> type so the signature became:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">EXPORT <span class="type">int32_t</span> <span class="title">rvn_mmap_file</span><span class="params">(<span class="type">int64_t</span> sz, <span class="type">int32_t</span> flags, <span class="type">void</span> *handle, <span class="type">int64_t</span> offset, <span class="type">void</span> **addr, <span class="type">int32_t</span> *detailed_error_code)</span></span></span><br></pre></td></tr></table></figure><h2 id="The-moral-of-the-story"><a href="#The-moral-of-the-story" class="headerlink" title="The moral of the story"></a>The moral of the story</h2><p>Usually, segmentation faults are associated with null point dereference or other types of pointer issue, but as we can see here, this doesn’t have to be so.</p>]]></content>
      
      
      <categories>
          
          <category> Debugging </category>
          
          <category> Post-mortem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Debugging </tag>
            
            <tag> Linux </tag>
            
            <tag> Gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hunter, C++ package management made easy</title>
      <link href="/2020/01/01/hunter-cpp-package-manager/"/>
      <url>/2020/01/01/hunter-cpp-package-manager/</url>
      
        <content type="html"><![CDATA[<p>In a previous post, I detailed involved and frustrating process I needed to go through to compile OpenCV as part of my application. You can see the post <a href="/2019/12/25/opencv-and-cmake-in-cpp/">in this link</a>.<br>All the trouble I describe there could have been avoided by using <a href="https://github.com/cpp-pm/hunter">Hunter</a> - a CMake based package manager for C++ projects. The idea is to have a sort-of repository of configuration and install scripts for different packages that would handle configuring 3rd-party dependencies (and their dependencies) for your project. Kinda like NuGet for .Net, but for C++. Just take a look at the <a href="https://cpp-pm-hunter.readthedocs.io/en/latest/packages.html">list of supported libraries</a> - I think it is awesome!</p><h2 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code!"></a>Show me the code!</h2><p>It is really simple to use Hunter. First, you need to download <em>CMake</em> script from <a href="https://raw.githubusercontent.com/hunter-packages/gate/master/cmake/HunterGate.cmake">here</a>, include it <em>before</em> <code>project()</code> statement and then run <code>HunterGate()</code> initialization function of the package manager (The exact URL and SHA1 for the parameters can be taken from the <a href="https://github.com/cpp-pm/hunter/releases">releases page</a> of Hunter). In this sample, I am going to install <em>OpenCV</em> and use it in a very simple test app.<br>So, after all this, the root <em>CMakeLists.txt</em> should look similar to this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;cmake/HunterGate.cmake&quot;</span>)</span><br><span class="line">HunterGate(</span><br><span class="line">    URL <span class="string">&quot;https://github.com/cpp-pm/hunter/archive/v0.23.240.tar.gz&quot;</span></span><br><span class="line">    SHA1 <span class="string">&quot;ca19f3769e6c80cfdd19d8b12ba5102c27b074e0&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (<span class="string">&quot;HunterDemo&quot;</span>)</span><br><span class="line"></span><br><span class="line">hunter_add_package(OpenCV)</span><br><span class="line"><span class="keyword">add_subdirectory</span> (<span class="string">&quot;PrintImageSizeUtil&quot;</span>)</span><br></pre></td></tr></table></figure><p>Then, the <em>CMakeLists.txt</em> in the subdirectory where we want to use <em>OpenCV</em> would look like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">add_executable</span> (PrintImageSizeUtil <span class="string">&quot;PrintImageSizeUtil.cpp&quot;</span> <span class="string">&quot;PrintImageSizeUtil.h&quot;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(PrintImageSizeUtil PRIVATE <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure><p>Well, thats it! It will take some time for Hunter to download and compile all the needed dependencies, but when CMake configuration stage completes, the test project will simply compile - the whole experience of using Hunter <em>almost</em> feels like using NuGet, it feels really effortless.<br>You can take a look at the source code of this demo at <a href="https://github.com/myarichuk/hunterdemo">this repository</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CMake </tag>
            
            <tag> Package Management </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV + Visual Studio + CMake = Adventure time</title>
      <link href="/2019/12/25/opencv-and-cmake-in-cpp/"/>
      <url>/2019/12/25/opencv-and-cmake-in-cpp/</url>
      
        <content type="html"><![CDATA[<p>In theory, configuring a popular library like OpenCV in CMake should be easy. In practice, sadly, it is anything BUT easy. Why? Let me show you…</p><blockquote><p>Note that I am not very knowledgeable in CMake, so it is possible I am doing something stupid. If so, it is even worse - as far as I understand the intent behind CMake, it should make developers lives easier, not harder.</p></blockquote><p>This post is documentation of a frustrating journey of performing what <em>should</em> have been a trivial task - make dependency compile as part of a project.<br>If you’d like to skip and take a look at working code, you can take a look at <a href="https://github.com/myarichuk/OpenCV.CMake">this repository</a>.</p><h2 id="Attempt-1"><a href="#Attempt-1" class="headerlink" title="Attempt 1"></a>Attempt 1</h2><p>According to online tutorials and CMake documentation, a good way (best practice?) to download OpenCV and configure it as a part of the project is to use <code>FetchContent</code>. Alright, I thought to myself and wrote the following:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.14</span>)</span><br><span class="line"><span class="keyword">project</span> (<span class="string">&quot;CMake Reference Samples&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(FetchContent)</span><br><span class="line">FetchContent_Declare(  </span><br><span class="line">opencv  </span><br><span class="line">GIT_REPOSITORY https://github.com/opencv/opencv.git</span><br><span class="line">GIT_TAG        master</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">FetchContent_MakeAvailable(opencv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span> (<span class="string">&quot;OpenCV.CMake&quot;</span>)</span><br></pre></td></tr></table></figure><p>And then, in the project subfolder that is supposed to use OpenCV, I wrote the following:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV CONFIG REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (OpenCV.CMake <span class="string">&quot;OpenCV.CMake.cpp&quot;</span> <span class="string">&quot;OpenCV.CMake.h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_dependencies</span>(OpenCV.CMake opencv)</span><br><span class="line"><span class="keyword">target_include_directories</span>(OpenCV.CMake PRIVATE <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(OpenCV.CMake PRIVATE <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure><p>And then, generation of CMake build scripts… fails. With lots of errors that look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CMake Error in out/build/x64-Debug/_deps/opencv-src/modules/core/CMakeLists.txt:</span><br><span class="line">  Target &quot;opencv_core&quot; INTERFACE_INCLUDE_DIRECTORIES property contains path:</span><br><span class="line"></span><br><span class="line">    &quot;E:/projects/OpenCV.CMake/out/build/x64-Debug&quot;</span><br><span class="line"></span><br><span class="line">  which is prefixed in the build directory.</span><br></pre></td></tr></table></figure><h2 id="Attempt-1-5"><a href="#Attempt-1-5" class="headerlink" title="Attempt 1.5"></a>Attempt 1.5</h2><p>I thought to myself, I must’ve done something wrong. First thing that I did, I added <code>set(FETCHCONTENT_QUIET off)</code> before calling <code>Fetch_Content()</code> - in theory, that would allow to see the exact steps it took to download and configure OpenCV. Well, I did see the steps.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; [CMake] -- Populating opencv</span><br><span class="line"><span class="number">1</span>&gt; [CMake] -- Configuring done</span><br><span class="line"><span class="number">1</span>&gt; [CMake] -- Generating done</span><br><span class="line"><span class="number">1</span>&gt; [CMake] -- Build files have been written to: E:/projects/OpenCV.CMake/out/build/x64-Debug/external/opencv-subbuild</span><br><span class="line"><span class="number">1</span>&gt; [CMake] [<span class="number">0</span>/<span class="number">6</span>] Performing update step for &#x27;opencv-populate&#x27;</span><br><span class="line"><span class="number">1</span>&gt; [CMake] From https://github.com/opencv/opencv</span><br><span class="line"><span class="number">1</span>&gt; [CMake]    d76f245..<span class="number">7</span>b12cbd  master     -&gt; origin/master</span><br><span class="line"><span class="number">1</span>&gt; [CMake]    <span class="number">9572895</span>..<span class="number">7</span>b28d5b  <span class="number">3.4</span>        -&gt; origin/<span class="number">3.4</span></span><br><span class="line"><span class="number">1</span>&gt; [CMake] First, rewinding head to replay your work <span class="keyword">on</span> top of it...</span><br><span class="line"><span class="number">1</span>&gt; [CMake] Fast-forwarded master to origin/master.</span><br><span class="line"><span class="number">1</span>&gt; [CMake] [<span class="number">2</span>/<span class="number">6</span>] No configure step for &#x27;opencv-populate&#x27;</span><br><span class="line"><span class="number">1</span>&gt; [CMake] [<span class="number">3</span>/<span class="number">6</span>] No build step for &#x27;opencv-populate&#x27;</span><br><span class="line"><span class="number">1</span>&gt; [CMake] [<span class="number">4</span>/<span class="number">6</span>] No <span class="keyword">install</span> step for &#x27;opencv-populate&#x27;</span><br><span class="line"><span class="number">1</span>&gt; [CMake] [<span class="number">5</span>/<span class="number">6</span>] No <span class="keyword">test</span> step for &#x27;opencv-populate&#x27;</span><br><span class="line"><span class="number">1</span>&gt; [CMake] [<span class="number">6</span>/<span class="number">6</span>] Completed &#x27;opencv-populate&#x27;</span><br></pre></td></tr></table></figure><p>That is nice, but it didn’t solve the issue, the problem apparently was in configure stage of CMake because I saw the same errors as above.<br>Reading on the internet and trying various stuff didn’t help much. For example, one solution offered by forums was to set target properties of the target like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set_target_properties</span>(opencv PROPERTIES</span><br><span class="line">  INTERFACE_INCLUDE_DIRECTORIES <span class="string">&quot;$&#123;OpenCV_INCLUDE_DIRS&#125;&quot;</span></span><br><span class="line">  INTERFACE_LINK_LIBRARIES <span class="string">&quot;$&#123;OpenCV_LIBS&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>This looked like it <em>should</em> work, but after running <code>FetchContent_MakeAvailable()</code> on <strong>opencv</strong>, it apparently wasn’t recognized as target (which seemed like it <em>should</em> have recognized).</p><h2 id="Some-investigation-time"><a href="#Some-investigation-time" class="headerlink" title="Some investigation time!"></a>Some investigation time!</h2><p>I decided to dig depeer. According to CMake sources (found <a href="https://github.com/Kitware/CMake/blob/966a9eece32f55fab479ea6997dea68e1c2d6212/Modules/FetchContent.cmake#L1038">here</a>), I am seeing the following implenentation of <code>FetchContent_MakeAvailable</code>:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">macro</span>(FetchContent_MakeAvailable)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span>(contentName IN ITEMS <span class="variable">$&#123;ARGV&#125;</span>)</span><br><span class="line">    <span class="keyword">string</span>(TOLOWER <span class="variable">$&#123;contentName&#125;</span> contentNameLower)</span><br><span class="line">    FetchContent_GetProperties(<span class="variable">$&#123;contentName&#125;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">NOT</span> <span class="variable">$&#123;contentNameLower&#125;</span>_POPULATED)</span><br><span class="line">      FetchContent_Populate(<span class="variable">$&#123;contentName&#125;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Only try to call add_subdirectory() if the populated content</span></span><br><span class="line">      <span class="comment"># can be treated that way. Protecting the call with the check</span></span><br><span class="line">      <span class="comment"># allows this function to be used for projects that just want</span></span><br><span class="line">      <span class="comment"># to ensure the content exists, such as to provide content at</span></span><br><span class="line">      <span class="comment"># a known location.</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">EXISTS</span> <span class="variable">$&#123;$&#123;contentNameLower&#125;</span>_SOURCE_DIR&#125;/CMakeLists.txt)</span><br><span class="line">        <span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;$&#123;contentNameLower&#125;</span>_SOURCE_DIR&#125;</span><br><span class="line">                         <span class="variable">$&#123;$&#123;contentNameLower&#125;</span>_BINARY_DIR&#125;)</span><br><span class="line">      <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">  <span class="keyword">endforeach</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmacro</span>()</span><br></pre></td></tr></table></figure><p>Since it uses <code>FetchContent_Populate()</code> to do its job, I looked at its implementation as well. There I saw something interesting.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(__FetchContent_directPopulate contentName)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># &gt;&gt; skipping some code for clarity&#x27;s sake</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Create and build a separate CMake project to carry out the population.</span></span><br><span class="line">  <span class="keyword">configure_file</span>(<span class="string">&quot;$&#123;CMAKE_CURRENT_FUNCTION_LIST_DIR&#125;/FetchContent/CMakeLists.cmake.in&quot;</span></span><br><span class="line">                 <span class="string">&quot;$&#123;ARG_SUBBUILD_DIR&#125;/CMakeLists.txt&quot;</span>)</span><br><span class="line">  <span class="keyword">execute_process</span>(</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> <span class="variable">$&#123;generatorOpts&#125;</span> .</span><br><span class="line">    RESULT_VARIABLE result</span><br><span class="line">    <span class="variable">$&#123;outputOptions&#125;</span></span><br><span class="line">    WORKING_DIRECTORY <span class="string">&quot;$&#123;ARG_SUBBUILD_DIR&#125;&quot;</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span>(result)</span><br><span class="line">    <span class="keyword">if</span>(capturedOutput)</span><br><span class="line">      <span class="keyword">message</span>(<span class="string">&quot;$&#123;capturedOutput&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;CMake step for $&#123;contentName&#125; failed: $&#123;result&#125;&quot;</span>)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line">  <span class="keyword">execute_process</span>(</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> --build .</span><br><span class="line">    RESULT_VARIABLE result</span><br><span class="line">    <span class="variable">$&#123;outputOptions&#125;</span></span><br><span class="line">    WORKING_DIRECTORY <span class="string">&quot;$&#123;ARG_SUBBUILD_DIR&#125;&quot;</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span>(result)</span><br><span class="line">    <span class="keyword">if</span>(capturedOutput)</span><br><span class="line">      <span class="keyword">message</span>(<span class="string">&quot;$&#123;capturedOutput&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;Build step for $&#123;contentName&#125; failed: $&#123;result&#125;&quot;</span>)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">endfunction</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Apparently, it dynamically creates another CMakeLists.txt and builds it as a child process of current CMake. And the template for the generated CMakeLists.txt looks like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Distributed under the OSI-approved BSD 3-Clause License.  See accompanying</span></span><br><span class="line"><span class="comment"># file Copyright.txt or https://cmake.org/licensing for details.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="variable">$&#123;CMAKE_VERSION&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We name the project and the target for the ExternalProject_Add() call</span></span><br><span class="line"><span class="comment"># to something that will highlight to the user what we are working on if</span></span><br><span class="line"><span class="comment"># something goes wrong and an error message is produced.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;contentName&#125;</span>-populate NONE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(ExternalProject)</span><br><span class="line">ExternalProject_Add(<span class="variable">$&#123;contentName&#125;</span>-populate</span><br><span class="line">                    <span class="variable">$&#123;ARG_EXTRA&#125;</span></span><br><span class="line">                    SOURCE_DIR          <span class="string">&quot;$&#123;ARG_SOURCE_DIR&#125;&quot;</span></span><br><span class="line">                    BINARY_DIR          <span class="string">&quot;$&#123;ARG_BINARY_DIR&#125;&quot;</span></span><br><span class="line">                    CONFIGURE_COMMAND   <span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">BUILD_COMMAND</span>       <span class="string">&quot;&quot;</span></span><br><span class="line">                    INSTALL_COMMAND     <span class="string">&quot;&quot;</span></span><br><span class="line">                    TEST_COMMAND        <span class="string">&quot;&quot;</span></span><br><span class="line">                    USES_TERMINAL_DOWNLOAD  YES</span><br><span class="line">                    USES_TERMINAL_UPDATE    YES</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>This means that <code>FetchContent_Populate()</code> simply executes ExternalProject_Add but with <code>CONFIGURE_COMMAND</code>, <code>BUILD_COMMAND</code> and <code>INSTALL_COMMAND</code> disabled (yes, I know this is in CMake documentation, but I find it easier to read code than documentation - it is less boring this way!)<br>After looking at OpenCV CMake scripts, it seemed that those stages <em>should</em> be executed before adding OpenCV as subdirectory - its CMake seems to pull dependencies during build time, not configure time.</p><h2 id="Attempt-2"><a href="#Attempt-2" class="headerlink" title="Attempt 2"></a>Attempt 2</h2><p>As a conclusion, I needed a way to run configure, build and install commands of <code>ExternalProject_Add()</code> at main CMake configuration step. <a href="https://stackoverflow.com/a/23570741/320103">This Stackoverflow answer</a> seemed promising. I changed it a little to use <code>GIT_REPOSITORY</code> instead of <code>URL</code> command, so what I used looked like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This function is used to force a build on a dependant project at cmake configuration phase.</span></span><br><span class="line"><span class="keyword">function</span> (build_external_project <span class="keyword">target</span> prefix url branch) <span class="comment">#FOLLOWING ARGUMENTS are the CMAKE_ARGS of ExternalProject_Add</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>(trigger_build_dir <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/force_<span class="variable">$&#123;target&#125;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#mktemp dir in build tree</span></span><br><span class="line">    <span class="keyword">file</span>(<span class="keyword">MAKE_DIRECTORY</span> <span class="variable">$&#123;trigger_build_dir&#125;</span> <span class="variable">$&#123;trigger_build_dir&#125;</span>/build)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#generate false dependency project</span></span><br><span class="line">    <span class="keyword">set</span>(CMAKE_LIST_CONTENT <span class="string">&quot;</span></span><br><span class="line"><span class="string">        cmake_minimum_required(VERSION 3.0)</span></span><br><span class="line"><span class="string">        project(ExternalProjectCustom)</span></span><br><span class="line"><span class="string">        include(ExternalProject)</span></span><br><span class="line"><span class="string">        ExternalProject_add($&#123;target&#125;</span></span><br><span class="line"><span class="string">            PREFIX $&#123;prefix&#125;/$&#123;target&#125;</span></span><br><span class="line"><span class="string">            GIT_REPOSITORY  $&#123;url&#125;</span></span><br><span class="line"><span class="string">            GIT_TAG $&#123;branch&#125;</span></span><br><span class="line"><span class="string">            CMAKE_ARGS $&#123;ARGN&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        add_custom_target(trigger_$&#123;target&#125;)</span></span><br><span class="line"><span class="string">        add_dependencies(trigger_$&#123;target&#125; $&#123;target&#125;)</span></span><br><span class="line"><span class="string">    &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">file</span>(WRITE <span class="variable">$&#123;trigger_build_dir&#125;</span>/CMakeLists.txt <span class="string">&quot;$&#123;CMAKE_LIST_CONTENT&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> ..</span><br><span class="line">        WORKING_DIRECTORY <span class="variable">$&#123;trigger_build_dir&#125;</span>/build</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> --build .</span><br><span class="line">        WORKING_DIRECTORY <span class="variable">$&#123;trigger_build_dir&#125;</span>/build</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure><p>Then in the root <em>CMakeLists.txt</em> I simply called this function</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(cmake/build_external_project.cmake)</span><br><span class="line">build_external_project(opencv <span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/external https://github.com/opencv/opencv.git master)</span><br></pre></td></tr></table></figure><p>After some time, to my mild suprise, it succeeded!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1&gt; [CMake] -- Configuring done</span><br><span class="line">1&gt; [CMake] -- Generating done</span><br><span class="line">1&gt; [CMake] -- Build files have been written to: E:/projects/OpenCV.CMake/out/build/x64-Debug</span><br><span class="line">1&gt; [CMake] </span><br><span class="line">1&gt; Extracted includes paths.</span><br><span class="line">1&gt; Extracted CMake variables.</span><br><span class="line">1&gt; Extracted source files and headers.</span><br><span class="line">1&gt; Extracted code model.</span><br><span class="line">1&gt; CMake generation finished.</span><br></pre></td></tr></table></figure><p>The next step was to configure the subdirectory that will actually use OpenCV for compilation and linking. In the end, the subdirectory CMakeLists.txt looked like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (OpenCVCMake <span class="string">&quot;OpenCV.CMake.cpp&quot;</span> <span class="string">&quot;OpenCV.CMake.h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(OpenCVCMake PRIVATE <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(OpenCVCMake PRIVATE <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure><p>I try to compile and… run into another issue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error&#x27;external/opencv-build/lib/opencv_dnn420d.lib&#x27;, needed by &#x27;bin/OpenCVCMake.exe&#x27;, missing and no known rule to make it</span><br></pre></td></tr></table></figure><p>Then I looked again at CMake log and noticed this curious line:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; [CMake] -- Building for: Visual Studio <span class="number">16</span> <span class="number">2019</span></span><br></pre></td></tr></table></figure><p>Then I noticed that in the build folder there is lots of <strong>vcxproj</strong> files were being generated. Then I modified the function to invoke current CMake generator, in this case it is <code>Ninja</code> - the default generator for Visual Studio CMake projects.<br>I adjusted the configure step in <code>build_external_project()</code> to include the current CMake generator - notice the <code>-G $&#123;CMAKE_GENERATOR&#125;</code> addition.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -G <span class="variable">$&#123;CMAKE_GENERATOR&#125;</span> ..</span><br><span class="line">    WORKING_DIRECTORY <span class="variable">$&#123;trigger_build_dir&#125;</span>/build</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>And then I saw this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; [CMake] CMake Error: Error: generator : Ninja</span><br><span class="line"><span class="number">1</span>&gt; [CMake] Does <span class="keyword">not</span> match the generator used previously: Visual Studio <span class="number">16</span> <span class="number">2019</span></span><br><span class="line"><span class="number">1</span>&gt; [CMake] Either <span class="keyword">remove</span> the CMakeCache.txt <span class="keyword">file</span> <span class="keyword">and</span> CMakeFiles directory <span class="keyword">or</span> choose a different binary directory.</span><br></pre></td></tr></table></figure><p>After a bit of facepalm I deleted all possible temporary folders (which by now accumulted to 4GB!), and updated the root CMakeLists.txt, so the configure/build would take less time.</p><p>The resulting root CMakeLists.txt looked like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.14</span>)</span><br><span class="line"><span class="keyword">project</span> (<span class="string">&quot;OpenCV CMake Reference Sample&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(cmake/build_external_project.cmake)</span><br><span class="line">build_external_project(</span><br><span class="line">opencv </span><br><span class="line"><span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/external </span><br><span class="line">https://github.com/opencv/opencv.git </span><br><span class="line">master</span><br><span class="line">-DBUILD_PERF_TESTS:BOOL=<span class="keyword">FALSE</span></span><br><span class="line">    -DBUILD_DOCS:BOOL=<span class="keyword">FALSE</span></span><br><span class="line">    -DBUILD_EXAMPLES:BOOL=<span class="keyword">FALSE</span></span><br><span class="line">    -DBUILD_TESTS:BOOL=<span class="keyword">FALSE</span></span><br><span class="line">    -DBUILD_SHARED_LIBS:BOOL=<span class="keyword">FALSE</span></span><br><span class="line">  -DBUILD_WITH_DEBUG_INFO=<span class="keyword">OFF</span></span><br><span class="line">    -DBUILD_PACKAGE:BOOL=<span class="keyword">OFF</span></span><br><span class="line">  -DCMAKE_BUILD_TYPE:<span class="keyword">STRING</span>=Release</span><br><span class="line">  -DCMAKE_INSTALL_PREFIX:PATH=<span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/opencv</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span> (<span class="string">&quot;OpenCV.CMake&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>I re-generated CMake cache, and saw… another issue. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> [CMake] CMake Warning at out/build/x64-Debug/opencv/OpenCVConfig.cmake:176 (message):</span><br><span class="line">1&gt; [CMake]   Found OpenCV Windows Pack but it has no binaries compatible with your</span><br><span class="line">1&gt; [CMake]   configuration.</span><br><span class="line">1&gt; [CMake] </span><br><span class="line">1&gt; [CMake]   You should manually point CMake variable OpenCV_DIR to your build of OpenCV</span><br><span class="line">1&gt; [CMake]   library.</span><br><span class="line">1&gt; [CMake] Call Stack (most recent call first):</span><br><span class="line">1&gt; [CMake]   OpenCV.CMake/CMakeLists.txt:3 (find_package)</span><br><span class="line">1&gt; [CMake] CMake Error at OpenCV.CMake/CMakeLists.txt:3 (find_package):</span><br><span class="line">1&gt; [CMake]   Found package configuration file:</span><br><span class="line">1&gt; [CMake] </span><br><span class="line">1&gt; [CMake]     E:/projects/OpenCV.CMake/out/build/x64-Debug/opencv/OpenCVConfig.cmake</span><br><span class="line">1&gt; [CMake] </span><br><span class="line">1&gt; [CMake]   but it set OpenCV_FOUND to FALSE so package &quot;OpenCV&quot; is considered to be</span><br><span class="line">1&gt; [CMake]   NOT FOUND.</span><br></pre></td></tr></table></figure><p>After I specified CMake install prefix, in the ‘opencv’ directory of output, the compiled and <em>installed</em> OpenCV appeared. I was getting closer.<br><img src="OpenCV_Install_Output.PNG" alt=""></p><p>The last thing (is it?) I needed to do is to update the subdirectory CMakeLists.txt and change the <code>find_package()</code> to <code>find_library()</code>, so the resulting line looked like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_library</span>(OpenCV CONFIG REQUIRED)</span><br></pre></td></tr></table></figure><p>Apparently, it was not the last thing. The project compiled successfully, but there was no include folders - after some fiddling, apparently the <code>find_library()</code> doesn’t set <code>OpenCV_INCLUDE_DIRS</code> and <code>OpenCV_LIBS</code> variables as it should. </p><p>After looking through <em>OpenCVConfig.cmake</em> I saw a very interesting part:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> <span class="keyword">DEFINED</span> OpenCV_STATIC)</span><br><span class="line">  <span class="comment"># look for global setting</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">NOT</span> <span class="keyword">DEFINED</span> BUILD_SHARED_LIBS <span class="keyword">OR</span> BUILD_SHARED_LIBS)</span><br><span class="line">    <span class="keyword">set</span>(OpenCV_STATIC <span class="keyword">OFF</span>)</span><br><span class="line">  <span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">set</span>(OpenCV_STATIC <span class="keyword">ON</span>)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>Since I wanted to link statically, I set <code>BUILD_SHARED_LIBS</code> before “finding” OpenCV package.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(BUILD_SHARED_LIBS <span class="keyword">OFF</span>)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br></pre></td></tr></table></figure><p>That finally got OpenCV found by the CMake</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1&gt; [CMake] [5/5] Completed &#x27;opencv&#x27;</span><br><span class="line">1&gt; [CMake] -- OpenCV ARCH: x64</span><br><span class="line">1&gt; [CMake] -- OpenCV RUNTIME: vc16</span><br><span class="line">1&gt; [CMake] -- OpenCV STATIC: ON</span><br><span class="line">1&gt; [CMake] -- Found OpenCV 4.2.0 in E:/projects/OpenCV.CMake/out/build/x64-Debug/opencv/x64/vc16/staticlib</span><br><span class="line">1&gt; [CMake] include =&gt; E:/projects/OpenCV.CMake/out/build/x64-Debug/opencv/include</span><br><span class="line">1&gt; [CMake] link =&gt; opencv_calib3d;opencv_core;opencv_dnn;opencv_features2d;opencv_flann;opencv_gapi;opencv_highgui;opencv_imgcodecs;opencv_imgproc;opencv_ml;opencv_objdetect;opencv_photo;opencv_stitching;opencv_video;opencv_videoio</span><br><span class="line">1&gt; [CMake] -- Configuring done</span><br><span class="line">1&gt; [CMake] -- Generating done</span><br><span class="line">1&gt; [CMake] -- Build files have been written to: E:/projects/OpenCV.CMake/out/build/x64-Debug</span><br><span class="line">1&gt; [CMake] </span><br><span class="line">1&gt; Extracted includes paths.</span><br><span class="line">1&gt; Extracted CMake variables.</span><br><span class="line">1&gt; Extracted source files and headers.</span><br><span class="line">1&gt; Extracted code model.</span><br><span class="line">1&gt; CMake generation finished.</span><br></pre></td></tr></table></figure><p>That was it! Finally, the project worked. I was able to compile and run very basic testing code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> img = cv::<span class="built_in">imread</span>(<span class="string">&quot;e:\\Capture.JPG&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;image size: &quot;</span> &lt;&lt; img.cols &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; img.rows &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can download the full project from <a href="https://github.com/myarichuk/OpenCV.CMake">its repository</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CMake </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello ANTLR (writing parsers is easier than you think!)</title>
      <link href="/2019/12/25/writing-parsers-easier-than-you-think/"/>
      <url>/2019/12/25/writing-parsers-easier-than-you-think/</url>
      
        <content type="html"><![CDATA[<p>After playing around with the awesome ANTLR for a while (it is a <a href="https://www.antlr.org/">parser generator</a>, in case you are not familiar with it), I decided to write something that could have helped me before I started looking into parsers. This post assumes you have heard of parsers but never actually wrote one.</p><h2 id="A-word-or-two-on-what-parsers-are"><a href="#A-word-or-two-on-what-parsers-are" class="headerlink" title="A word (or two) on what parsers are"></a>A word (or two) on <em>what</em> parsers are</h2><p>When you have a text with known syntax, be it structured logging, programming language or configuration files and you want to parse it with an application, you can use a parser that would transform text to objects in an application.<br>Usually parsers have two components</p><ul><li>Lexer: transforms text into stream of known tokens, such as ‘comma’, ‘variable identifier’ or ‘number’</li><li>Parser: processes Lexer’s tokens according to grammar rules and turns them into application objects (abstract syntax trees)</li></ul><blockquote><p>Note: this is pretty much a description of a <a href="https://en.wikipedia.org/wiki/Interpreter_pattern">GoF design pattern</a></p></blockquote><pre class="mermaid">graph LR;    A[Text]-->B[Lexer]    B-->C[Parser]    C-->D[Abstract Syntax Tree (AST)]    style A fill:white,stroke:#333,stroke-width:1px    style B fill:#e8e4da,stroke:#333,stroke-width:2px    style C fill:#c2beb4,stroke:#333,stroke-width:2px    style D fill:#b4dbba,stroke:#333,stroke-width:1px</pre><p>This probably feels too abstract, so let me give a concrete example:<br>Let’s say we want to parse the following arithmetic expression: <strong>3 + 2 * 5</strong><br>At first stage, we will pass this text through lexer. After lexing, we would have the following stream of tokens:</p><pre class="mermaid">graph LR;  A[3]-->B[operator '+']  B-->C[2]  C-->D[operator '*']  D-->E[5]</pre><p>Then, the parser will traverse over the tokens and generate abstract syntax tree (AST), in our case, parsing would result with the following AST:</p><pre class="mermaid">graph TB  A(2)-->B{*}  C(5)-->B  B-->D{+}  E(3)-->D</pre><p>In order to evaluate such expression, we would use DFS to traverse the AST, first evaluating <strong>2 * 5</strong>, then evaluating <strong>result + 3</strong>.<br>That’s nice, but show me the code, perhaps? Ok!</p><h2 id="Hello-ANTLR"><a href="#Hello-ANTLR" class="headerlink" title="Hello ANTLR"></a>Hello ANTLR</h2><p>The idea behind ANTLR is to create special syntax that would define tokens for the lexer and the grammar for the parser. In the code used here, for convenience I used a combined grammar that allows defining both tokens and grammar in one file. (Read more about ANTLR grammar structure <a href="https://github.com/antlr/antlr4/blob/master/doc/grammars.md">here</a>)  </p><h3 id="Lexer"><a href="#Lexer" class="headerlink" title="Lexer"></a>Lexer</h3><p>First, we define the tokens for lexing. Here are their definitions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//At the beginning of combined grammar file we need to declare the grammar name</span><br><span class="line">//Note that the grammar name must be the same as grammar filename</span><br><span class="line">grammar Algebra;</span><br><span class="line"></span><br><span class="line">//start token definitions</span><br><span class="line"></span><br><span class="line">//fragment is a kind of a function</span><br><span class="line">fragment DIGIT: [0-9];</span><br><span class="line"></span><br><span class="line">PLUS: &#x27;+&#x27;;</span><br><span class="line">MINUS: &#x27;-&#x27;;</span><br><span class="line">MULTIPLY: &#x27;*&#x27;;</span><br><span class="line">DIVIDE: &#x27;/&#x27;;</span><br><span class="line">POWER: &#x27;^&#x27;;</span><br><span class="line"></span><br><span class="line">LPAREN: &#x27;(&#x27;;</span><br><span class="line">RPAREN: &#x27;)&#x27;;</span><br><span class="line">COMMA: &#x27;,&#x27;;</span><br><span class="line"></span><br><span class="line">SIN: &#x27;sin&#x27;;</span><br><span class="line">COS: &#x27;cos&#x27;;</span><br><span class="line">TAN: &#x27;tan&#x27;;</span><br><span class="line">LOG: &#x27;log&#x27;;</span><br><span class="line"></span><br><span class="line">//token definition for integer number. Recognizes number of any length</span><br><span class="line">//</span><br><span class="line">//for this token, the idea is that the lexer would consume characters </span><br><span class="line">//from the input stream until they fit the &#x27;DIGIT&#x27; fragment definition</span><br><span class="line">INTEGER: DIGIT+;</span><br><span class="line"></span><br><span class="line">//token definition for floating point number </span><br><span class="line">FLOAT: DIGIT+ &#x27;.&#x27; DIGIT+;</span><br></pre></td></tr></table></figure><p>When ANTLR is called with the above lexer grammar, it would use the token definitions to generate a class, in this case <code>AlgebraLexer</code>.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">AlgebraLexer</span> : <span class="title">Lexer</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//define constants for tokens defined in the grammar</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span></span><br><span class="line">PLUS=<span class="number">1</span>, MINUS=<span class="number">2</span>, MULTIPLY=<span class="number">3</span>, DIVIDE=<span class="number">4</span>, POWER=<span class="number">5</span>, LPAREN=<span class="number">6</span>, RPAREN=<span class="number">7</span>, COMMA=<span class="number">8</span>, </span><br><span class="line">SIN=<span class="number">9</span>, COS=<span class="number">10</span>, TAN=<span class="number">11</span>, LOG=<span class="number">12</span>, INTEGER=<span class="number">13</span>, FLOAT=<span class="number">14</span>;</span><br></pre></td></tr></table></figure><p>And then, you’d see the following weirdness in the generated lexer:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> SerializedAtn &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _serializedATN; &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _serializedATN =</span><br><span class="line"><span class="string">&quot;\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x10S\b\x1\x4\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4&quot;</span>+</span><br><span class="line"><span class="string">&quot;\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10&quot;</span>+</span><br><span class="line"><span class="string">&quot;\t\x10\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3&quot;</span>+</span><br><span class="line"><span class="string">&quot;\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3&quot;</span>+</span><br><span class="line"><span class="string">&quot;\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x6\xF\x45\n&quot;</span>+</span><br><span class="line"><span class="string">&quot;\xF\r\xF\xE\xF\x46\x3\x10\x6\x10J\n\x10\r\x10\xE\x10K\x3\x10\x3\x10\x6&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x10P\n\x10\r\x10\xE\x10Q\x2\x2\x2\x11\x3\x2\x2\x5\x2\x3\a\x2\x4\t\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x5\v\x2\x6\r\x2\a\xF\x2\b\x11\x2\t\x13\x2\n\x15\x2\v\x17\x2\f\x19\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\r\x1B\x2\xE\x1D\x2\xF\x1F\x2\x10\x3\x2\x3\x3\x2\x32;T\x2\x5\x3\x2\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x3!\x3\x2\x2\x2\x5#\x3\x2\x2\x2\a%\x3&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2\x2\t\&#x27;\x3\x2\x2\x2\v)\x3\x2\x2\x2\r+\x3\x2\x2\x2\xF-\x3\x2\x2\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x11/\x3\x2\x2\x2\x13\x31\x3\x2\x2\x2\x15\x33\x3\x2\x2\x2\x17\x37\x3\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2\x19;\x3\x2\x2\x2\x1B?\x3\x2\x2\x2\x1D\x44\x3\x2\x2\x2\x1FI\x3\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2!\&quot;\t\x2\x2\x2\&quot;\x4\x3\x2\x2\x2#$\a-\x2\x2$\x6\x3\x2\x2\x2%&amp;\a/&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2&amp;\b\x3\x2\x2\x2\&#x27;(\a,\x2\x2(\n\x3\x2\x2\x2)*\a\x31\x2\x2*\f\x3\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2+,\a`\x2\x2,\xE\x3\x2\x2\x2-.\a*\x2\x2.\x10\x3\x2\x2\x2/\x30\a+&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2\x30\x12\x3\x2\x2\x2\x31\x32\a.\x2\x2\x32\x14\x3\x2\x2\x2\x33\x34&quot;</span>+</span><br><span class="line"><span class="string">&quot;\au\x2\x2\x34\x35\ak\x2\x2\x35\x36\ap\x2\x2\x36\x16\x3\x2\x2\x2\x37\x38&quot;</span>+</span><br><span class="line"><span class="string">&quot;\a\x65\x2\x2\x38\x39\aq\x2\x2\x39:\au\x2\x2:\x18\x3\x2\x2\x2;&lt;\av\x2\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;&lt;=\a\x63\x2\x2=&gt;\ap\x2\x2&gt;\x1A\x3\x2\x2\x2?@\an\x2\x2@\x41\aq\x2\x2\x41&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x42\ai\x2\x2\x42\x1C\x3\x2\x2\x2\x43\x45\x5\x3\x2\x2\x44\x43\x3\x2\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\x1E\x3\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2HJ\x5\x3\x2\x2IH\x3\x2\x2\x2JK\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2LM\x3\x2\x2\x2MO\a\x30\x2\x2NP\x5\x3\x2\x2ON\x3\x2\x2\x2PQ\x3\x2&quot;</span>+</span><br><span class="line"><span class="string">&quot;\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2R \x3\x2\x2\x2\x6\x2\x46KQ\x2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ATN _ATN =</span><br><span class="line"><span class="keyword">new</span> ATNDeserializer().Deserialize(_serializedATN.ToCharArray());</span><br></pre></td></tr></table></figure><p><em>ATN</em> stands for <em>Augmented Transition Networks</em> - a state machine generated by ANTLR to parse tokens and grammar rules.<br>For example, this is the states generated to parse ‘+’ operator:<br><object data="PLUS.atn.svg" type="image/xml+svg"><br>    <!-- Your browser doesn't support rendering of SVG --><br>    <img src="PLUS.atn.png" alt="ATN for '+' token"><br></object></p><p>Now, what if we have a more complex token? For example, how would lexer token definition look like for a C-style double quoted string?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fragment D_STRING: &#x27;&quot;&#x27; ( &#x27;\\&#x27;. | &#x27;&quot;&quot;&#x27; | ~(&#x27;&quot;&#x27;| &#x27;\\&#x27;) )*? &#x27;&quot;&#x27;;</span><br></pre></td></tr></table></figure><p>The idea here is roughly similar to regex definition: we define starting and stopping character of the token (which are double quotes), then tell ANTLR to greedily parse any characters except <code>&quot;</code> or <code>\</code> (this is done by using ‘*’ that specifies ‘greedy’ parsing strategy)<br>This could be illustrated by what is sometimes called “railroad diagram”:<br><object data="D_STRING.rrd.svg" type="image/xml+svg"><br>    <!-- Your browser doesn't support rendering of SVG --><br>    <img style="width=100%" src="D_STRING.rrd.png" alt="Parsing diagram for double quoted string token"><br></object></p><p>As you can imagine, the ATN for such token is more… interesting.<br><object data="D_STRING.atn.svg" type="image/xml+svg"><br>    <!-- Your browser doesn't support rendering of SVG --><br>    <img src="D_STRING.atn.png" alt="ATN for double quoted string token"><br></object></p><h3 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h3><p>After we defined tokens, let’s define grammar rules by which the parser will do the generation.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//parsing rules definitions</span><br><span class="line">//root expression to parse, this is the starting point of the parser</span><br><span class="line">root: expression EOF;</span><br><span class="line"></span><br><span class="line">// This is a *recusive* rule to parse types of expressions we support.</span><br><span class="line">// Conceptually, this is evaluated from top down: the parser tries to match the first one (which is NumberExpression).</span><br><span class="line">// If it fails, the parser will try the next one. And so on..</span><br><span class="line">expression:</span><br><span class="line">   (INTEGER | FLOAT)                                                  #NumberExpression         |</span><br><span class="line">   MINUS num = expression                                           #NegativeNumberExpression   |</span><br><span class="line">   num = expression POWER pow = expression                             #PowerExpression         |</span><br><span class="line">   LPAREN expression RPAREN                                         #ParenthesisExpression      |</span><br><span class="line">   SIN LPAREN num = expression RPAREN                                  #SinusExpression         |</span><br><span class="line">   COS LPAREN num = expression RPAREN                                #CosinusExpression         |</span><br><span class="line">   TAN LPAREN num = expression RPAREN                                #TangentExpression         |</span><br><span class="line">   LOG LPAREN num = expression COMMA base = expression RPAREN         #LogarithmExpression      |</span><br><span class="line">   //notice that we put handling of multiplication and division first and then addition and substraction</span><br><span class="line">   //this is needed to establish operator precedence </span><br><span class="line">   //In this way, for expression &#x27;2 + 3 * 5&#x27;, first 3*5 will be evaluated and then &#x27;result&#x27; + 2</span><br><span class="line">   left = expression op = (MULTIPLY | DIVIDE) right = expression   #MultOrDivideExpression      |</span><br><span class="line">   left = expression op = (PLUS | MINUS) right = expression        #PlusOrMinusExpression      </span><br><span class="line">   ;</span><br></pre></td></tr></table></figure><p>The same kind of ATN is generated for parsing grammar rules. For example, the defined above <code>expression</code> rule will have the following (huge!) ATN:<br><object data="expression.atn.svg" type="image/xml+svg"><br>    <!-- Your browser doesn't support rendering of SVG --><br>    <img src="expression.atn.png" alt="ATN for double quoted string token"><br></object></p><p>Now, lets take a look at the code ANTLR actually generates. I think this can be avery good illustration at what ATN <em>is</em>.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> ExpressionContext <span class="title">expression</span>(<span class="params"><span class="built_in">int</span> _p</span>)</span> &#123;</span><br><span class="line">     <span class="comment">// some initialization code</span></span><br><span class="line">     EnterRecursionRule(_localctx, <span class="number">2</span>, RULE_expression, _p);</span><br><span class="line">     <span class="built_in">int</span> _la;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> _alt;</span><br><span class="line">        EnterOuterAlt(_localctx, <span class="number">1</span>);</span><br><span class="line">        &#123;</span><br><span class="line">        State = <span class="number">37</span>;</span><br><span class="line">        _errHandler.Sync(<span class="keyword">this</span>);</span><br><span class="line"> <span class="comment">//_input is a stream of tokens received from the lexer</span></span><br><span class="line"> <span class="comment">//here we look ahead 1 character and decide what kind of sub-rule we want to TRY and parse</span></span><br><span class="line"> <span class="comment">//notice that we do not *consume* characters (the Consume() method) until we are sure it is the right rule</span></span><br><span class="line">        <span class="keyword">switch</span> (_input.La(<span class="number">1</span>)) &#123;</span><br><span class="line"> <span class="comment">//note: INTEGER and FLOAT are tokens defined in the lexer</span></span><br><span class="line">        <span class="keyword">case</span> INTEGER: </span><br><span class="line">        <span class="keyword">case</span> FLOAT:</span><br><span class="line">           &#123;</span><br><span class="line"><span class="comment">//notice that the context is the &#x27;#NumberExpression&#x27; we had in the rule definition</span></span><br><span class="line">           _localctx = <span class="keyword">new</span> NumberExpressionContext(_localctx);</span><br><span class="line">           _ctx = _localctx;</span><br><span class="line">           _prevctx = _localctx;</span><br><span class="line"></span><br><span class="line">           State = <span class="number">8</span>; <span class="comment">//set ATN state</span></span><br><span class="line">           _la = _input.La(<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">if</span> ( !(_la==INTEGER || _la==FLOAT) ) &#123;</span><br><span class="line">           _errHandler.RecoverInline(<span class="keyword">this</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (_input.La(<span class="number">1</span>) == TokenConstants.Eof) &#123;</span><br><span class="line">                 matchedEOF = <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              _errHandler.ReportMatch(<span class="keyword">this</span>);</span><br><span class="line">              Consume(); <span class="comment">//only here we actualy consume </span></span><br><span class="line">           &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MINUS:</span><br><span class="line">           &#123;</span><br><span class="line"><span class="comment">//notice that this matches &#x27;#NegativeNumberExpression&#x27; defined in the rule</span></span><br><span class="line">           _localctx = <span class="keyword">new</span> NegativeNumberExpressionContext(_localctx);</span><br><span class="line">           _ctx = _localctx;</span><br><span class="line">           _prevctx = _localctx;</span><br><span class="line"><span class="comment">//set ATN state and try to match a token against current input symbol</span></span><br><span class="line">           State = <span class="number">9</span>; Match(MINUS); </span><br><span class="line">           State = <span class="number">10</span>; ((NegativeNumberExpressionContext)_localctx).num = expression(<span class="number">9</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//more code for the rule...</span></span><br></pre></td></tr></table></figure><p>That scary bunch of code looks a bit complex, but if you look closely it is rather simple (though still ugly!).<br>First, we enter the rule and set the state machine to the inital state of the particular rule</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EnterRecursionRule(_localctx, <span class="number">2</span>, RULE_expression, _p);</span><br><span class="line"><span class="built_in">int</span> _la;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="built_in">int</span> _alt;</span><br><span class="line">   EnterOuterAlt(_localctx, <span class="number">1</span>);</span><br><span class="line">   &#123;</span><br><span class="line">   State = <span class="number">37</span>; <span class="comment">//initial state of the state machine</span></span><br><span class="line">   _errHandler.Sync(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>Then we use the next token in the stream to select the “sub-rule” we have at this particular point of the source code we are parsing</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (_input.La(<span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>Then, if we have an INTEGER or a FLOAT token, we switch the current context to the “sub-rule” context, </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> INTEGER: </span><br><span class="line">      <span class="keyword">case</span> FLOAT:</span><br><span class="line">         &#123;</span><br><span class="line"><span class="comment">//notice that the context is the &#x27;#NumberExpression&#x27; we had in the rule definition</span></span><br><span class="line">         _localctx = <span class="keyword">new</span> NumberExpressionContext(_localctx);</span><br></pre></td></tr></table></figure><p>After switching the context, we cache the next character and “consume” the token from lexer stream (consuming means we mark the token as parsed, add it to resulting AST and continue)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">State = <span class="number">8</span>; <span class="comment">//set ATN state for this &quot;sub-rule&quot;</span></span><br><span class="line">_la = _input.La(<span class="number">1</span>); <span class="comment">//cache the next token in lexer stream</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//do some error handling in case the syntax is wrong</span></span><br><span class="line"><span class="comment">//note how we try to recover so despite syntax errors we parse ALL of the source code</span></span><br><span class="line"><span class="keyword">if</span> ( !(_la==INTEGER || _la==FLOAT) ) &#123;</span><br><span class="line">_errHandler.RecoverInline(<span class="keyword">this</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (_input.La(<span class="number">1</span>) == TokenConstants.Eof) &#123;</span><br><span class="line">      matchedEOF = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//register match for the &quot;sub-rule&quot; --&gt; this essentially adds node to AST</span></span><br><span class="line">   _errHandler.ReportMatch(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//mark the token as consumed and remove from lexer&#x27;s token stream</span></span><br><span class="line">   Consume();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Well… thats it! Roughly, all rules are parsed in this way, the only thing that differs is how next rules for the state machine are predicted (ANTLR has different <a href="https://www.antlr.org/api/Java/org/antlr/v4/runtime/atn/PredictionMode.html">prediction modes</a> that affect ambiguity resolution, among other things) and how errors are treated (see error handling strategy link below).  </p><p>Now, the nice thing in ANTLR generated parsers is their ability to continue parsing even if the input is partially incorrect. The method <code>Parser::Match()</code> (which is used in grammar rule parsing) illustrates this well. Notice how it registers the error, tries to recover and returns <em>bad token</em> so the parsing can continue.  </p><blockquote><p>This behavior can be changed by implementing different <a href="https://www.antlr.org/api/Java/org/antlr/v4/runtime/ANTLRErrorStrategy.html">error handling strategies</a> but this is out of the scope of this post.</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">return: NotNull</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IToken <span class="title">Match</span>(<span class="params"><span class="built_in">int</span> ttype</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IToken badToken = <span class="keyword">this</span>.CurrentToken;</span><br><span class="line">    <span class="keyword">if</span> (badToken.Type == ttype)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (ttype == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">this</span>.matchedEOF = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>._errHandler.ReportMatch(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.Consume();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    badToken = <span class="keyword">this</span>._errHandler.RecoverInline(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._buildParseTrees &amp;&amp; badToken.TokenIndex == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">this</span>._ctx.AddErrorNode(badToken);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> badToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Using-the-parser"><a href="#Using-the-parser" class="headerlink" title="Using the parser"></a>Using the parser</h2><p>Once we have a parsed our grammar and generated an AST, we need to evaluate it. Usually, this is done by using a <a href="https://en.wikipedia.org/wiki/Visitor_pattern">Visitor Pattern</a> to walk over AST (in a DFS-y way) and evaluate it.<br>In order to do that, ANTLR generates visitor classes, where each rule expression can be ‘visited’. In our case, algebra expression evaluation would look this:</p><blockquote><p>Just in case you are not familiar with C# 8 syntax: in this sample I am using the new <code>switch expressions</code> syntax. You can read more about them <a href="https://dotnetcoretutorials.com/2019/06/25/switch-expressions-in-c-8/">here</a>.</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpressionEvaluationVisitor</span> : <span class="title">AlgebraBaseVisitor</span>&lt;<span class="title">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitPowerExpression</span>(<span class="params">AlgebraParser.PowerExpressionContext context</span>)</span> =&gt; </span><br><span class="line">        Math.Pow(<span class="keyword">base</span>.Visit(context.num), (<span class="built_in">int</span>)<span class="keyword">base</span>.Visit(context.pow));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitNumberExpression</span>(<span class="params">AlgebraParser.NumberExpressionContext context</span>)</span> =&gt; </span><br><span class="line">        <span class="built_in">double</span>.Parse(context.GetText(), NumberStyles.Any);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitMultOrDivideExpression</span>(<span class="params">AlgebraParser.MultOrDivideExpressionContext context</span>)</span> =&gt;</span><br><span class="line">        context.op.Text <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;*&quot;</span> =&gt; (<span class="keyword">base</span>.Visit(context.left) * <span class="keyword">base</span>.Visit(context.right)),</span><br><span class="line">            <span class="string">&quot;/&quot;</span> =&gt; (<span class="keyword">base</span>.Visit(context.left) / <span class="keyword">base</span>.Visit(context.right)),</span><br><span class="line">            _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$&quot;Unsupported operator &#x27;<span class="subst">&#123;context.op.Text&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitPlusOrMinusExpression</span>(<span class="params">AlgebraParser.PlusOrMinusExpressionContext context</span>)</span> =&gt;</span><br><span class="line">        context.op.Text <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;+&quot;</span> =&gt; (<span class="keyword">base</span>.Visit(context.left) + <span class="keyword">base</span>.Visit(context.right)),</span><br><span class="line">            <span class="string">&quot;-&quot;</span> =&gt; (<span class="keyword">base</span>.Visit(context.left) - <span class="keyword">base</span>.Visit(context.right)),</span><br><span class="line">            _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$&quot;Unsupported operator &#x27;<span class="subst">&#123;context.op.Text&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitCosinusExpression</span>(<span class="params">AlgebraParser.CosinusExpressionContext context</span>)</span> =&gt; </span><br><span class="line">        Math.Cos(<span class="keyword">base</span>.Visit(context.num));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitLogarithmExpression</span>(<span class="params">AlgebraParser.LogarithmExpressionContext context</span>)</span> =&gt; </span><br><span class="line">        Math.Log(<span class="keyword">base</span>.Visit(context.num), <span class="keyword">base</span>.Visit(context.@base));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitTangentExpression</span>(<span class="params">AlgebraParser.TangentExpressionContext context</span>)</span> =&gt; </span><br><span class="line">        Math.Tan(<span class="keyword">base</span>.Visit(context.num));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitSinusExpression</span>(<span class="params">AlgebraParser.SinusExpressionContext context</span>)</span> =&gt; </span><br><span class="line">        Math.Sin(<span class="keyword">base</span>.Visit(context.num));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">VisitNegativeNumberExpression</span>(<span class="params">AlgebraParser.NegativeNumberExpressionContext context</span>)</span> =&gt; </span><br><span class="line">        <span class="number">-1</span> * <span class="keyword">base</span>.Visit(context.num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">AggregateResult</span>(<span class="params"><span class="built_in">double</span> aggregate, <span class="built_in">double</span> nextResult</span>)</span> =&gt; </span><br><span class="line">        aggregate + nextResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you can see, writing parsers might seem daunting at first, but in reality it is not a very hard task. Of course there is a notion of user-friendly error handling, ensuring proper ambiguity resolution and other stuff, but I think for a “hello world” tutorial the above code should be enough.<br>You can take a look at the whole sample project here: <a href="https://github.com/myarichuk/AlgebraExpressionEvaluator">https://github.com/myarichuk/AlgebraExpressionEvaluator</a>. In case you’d like to compile and run it, note that it targets .Net Core 3.0</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Parsers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANTLR </tag>
            
            <tag> C# </tag>
            
            <tag> Parsers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Even simple stuff, like C# TPL can surprise you!</title>
      <link href="/2019/12/17/rarely-used-task-continuation/"/>
      <url>/2019/12/17/rarely-used-task-continuation/</url>
      
        <content type="html"><![CDATA[<p>What do you think would happen if you run this code? Can you guess <em>without</em> actually running it?<br>Now try running it and see what happens. It might actually surprise you…  </p><iframe width="100%" height="600" src="https://dotnetfiddle.net/Widget/7k28o5" frameborder="0"></iframe><p>I know I was surprised by this, it took me a minute or two and a glimpse into <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcontinuationoptions?view=netcore-3.0">relevant documentation page</a> to understand what happened here.<br>The <code>backgroundTask</code> in the above code is actually a <em>continuation task</em>, and not the <em>background worker</em>. Since the <em>background worker</em> runs successfully, the <em>continuation task</em> is canceled, as it should. Actually, the code above should be rewritten like this:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> backgroundTask = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">   Thread.Sleep(<span class="number">2000</span>); <span class="comment">//simulate some work</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">backgroundTask.ContinueWith(_ =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Running the continuation!&quot;</span>);</span><br><span class="line">&#125;, TaskContinuationOptions.NotOnRanToCompletion);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> backgroundTask; <span class="comment">//we registered the continuation, now we can wait for the worker...</span></span><br></pre></td></tr></table></figure><p>All in all, I think it was a nice little issue. Also, this is yet again a proof of the timeless axiom: <em>assumption is the mother of all fuckups</em></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> WTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> WTF </tag>
            
            <tag> Debugging </tag>
            
            <tag> TPL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yet Another (Cryptic) CMake Error</title>
      <link href="/2019/12/17/cryptic-cmake-errors/"/>
      <url>/2019/12/17/cryptic-cmake-errors/</url>
      
        <content type="html"><![CDATA[<p>I like CMake. I really do. But sometimes… it is frustrating.<br>The samples found online are understandable and easy to follow and everything compiles fine until you try something non-trivial.<br>Like having an external project compile as part of your own so including and linking can be done easier.<br>I have created a new CMake project, then added sources of <a href="https://github.com/opencv/opencv">OpenCV</a> with as a git submodule.<br>The resulting CMake file looked like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.13</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (<span class="string">&quot;[some project name]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span> (<span class="string">&quot;Libs/opencv&quot;</span>) <span class="comment">#location of OpenCV&#x27;s source</span></span><br><span class="line"><span class="keyword">add_subdirectory</span> (<span class="string">&quot;[project that should work with OpenCV]&quot;</span>) <span class="comment">#the project I want to add refernce to OpenCV</span></span><br></pre></td></tr></table></figure><p>Now, seeing that OpenCV uses CMake, I assumed that it <em>should</em> work. And then CMake gods punished me for assuming too much - with the following error (actually more than one, there were 256 of them, but they look the same)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1&gt; [CMake] -- Found OpenCV: C:/[working folder]/build/x64-Debug (found version &quot;4.2.0&quot;) </span><br><span class="line">1&gt; [CMake] -- Configuring done</span><br><span class="line">1&gt; [CMake] CMake Error in Libs/opencv/modules/core/CMakeLists.txt:</span><br><span class="line">1&gt; [CMake]   Target &quot;opencv_core&quot; INTERFACE_INCLUDE_DIRECTORIES property contains path:</span><br><span class="line">1&gt; [CMake] </span><br><span class="line">1&gt; [CMake]     &quot;C:/[working folder]/build/x64-Debug&quot;</span><br><span class="line">1&gt; [CMake] </span><br><span class="line">1&gt; [CMake]   which is prefixed in the build directory.</span><br></pre></td></tr></table></figure><blockquote><p>If you happen to know why does this error happen, do let me know. I’d really appreciate that!</p></blockquote><p>This is as cryptic as it can be, worse yet, few people actually encountered this, and those who did made the error seem even more cryptic than it <em>should</em> be.<br>For example, <a href="https://cmake.org/pipermail/cmake-developers/2013-March/018513.html">this</a> seems related, but it didn’t help.<br>And <a href="https://cmake.org/pipermail/cmake/2016-June/063717.html">this guy</a> never received an answer to his valid question.<br>Now, I am not the first one to come up with such idea - <a href="https://answers.opencv.org/question/217218/how-to-link-with-opencv-as-cmake-subdirectory/">this guy</a> thought of it first, but also, surprisingly never got an answer.   </p><p>After some investigation, I reached the conculsion that <code>find_package</code> in the other CMake subproject was to blame for this error - probably I missed something very obvious. The problem is - I have no idea <em>what</em> did I miss.<br>This is how my subproject CMake looked like:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.13</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (&lt;app name&gt; &lt;source files&gt;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED) <span class="comment">#this is why the error happened</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... the rest of CMake</span></span><br></pre></td></tr></table></figure><p>Overall, after working for a few month with CMake (and being frustrated most of that time), I think it should require less arcane talents to properly handle CMake scripting. It is an excellent idea that more often than not works, but often requires crazy amount of time to figure out why things <em>don’t work</em>.</p><p>Thus, the moral of this story can be summed up as:<br><img src="meme.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
          <category> WTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CMake </tag>
            
            <tag> WTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adventures of a C# dev in C++ land - dependency injection</title>
      <link href="/2019/12/07/cpp-di-metaprogramming/"/>
      <url>/2019/12/07/cpp-di-metaprogramming/</url>
      
        <content type="html"><![CDATA[<p>I stumbled upon <a href="https://boost-experimental.github.io/di/index.html">Boost.DI</a> by accident and was instantly intrigued: for a developer used to C#, dependency injection during compilation time sounds crazy.</p><blockquote><p>Boost.DI uses C++ <a href="https://en.wikipedia.org/wiki/Template_metaprogramming">template metaprogramming</a> to implement its functionality. If you are not familiar with it, take a look <a href="https://www.fluentcpp.com/2017/06/02/write-template-metaprogramming-expressively/">here</a>.</p></blockquote><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>Resolves dependencies during compilation sounds great as an optimization. The biggest problem with DI libraries in C# is performance.<br>Just take a look at <a href="https://github.com/danielpalme/IocPerformance#basic-features">IOC/DI library benchmarks</a>! </p><blockquote><p>In case you are not familiar with DI, a good place to start reading <em>what</em> it is and <em>why</em> it is needed is those <a href="https://boost-experimental.github.io/di/cppcon-2018/#/">slides from a conference talk</a>. </p></blockquote><p>Everything seems great in “hello world”-ish sample code I found at Boost.DI repository, but I wondered if actually using it would be as easy as it seems. Probably because its been a while since I wrote C++, I quickly ran into an issue. I came up with the following test code that <em>should</em> have worked.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;di.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> di = boost::di;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">igreeter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">greet</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">greeter</span> : igreeter</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string message_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">greeter</span>(std::string message)</span><br><span class="line">        : <span class="built_in">message_</span>(std::<span class="built_in">move</span>(message))</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">greet</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; std::cout &lt;&lt; message_ &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">greeting_provider</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    igreeter&amp; greeter_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">greeting_provider</span>(igreeter&amp; greeter)</span><br><span class="line">        : <span class="built_in">greeter_</span>(greeter)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">()</span> <span class="type">const</span> </span>&#123; greeter_.<span class="built_in">greet</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//define how to resolve dependencies</span></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> injector = <span class="built_in">make_injector</span></span><br><span class="line">                          (</span><br><span class="line">                              di::bind&lt;igreeter&gt;.<span class="built_in">to</span>&lt;greeter&gt;(),</span><br><span class="line">                              di::<span class="built_in">bind</span>&lt;greeting_provider&gt;().<span class="built_in">to</span>&lt;greeting_provider&gt;(),</span><br><span class="line">                              di::<span class="built_in">bind</span>&lt;std::string&gt;().<span class="built_in">to</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">                          );</span><br><span class="line">    <span class="comment">//resolve all dependencies and construct an object</span></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> provider = injector.<span class="built_in">create</span>&lt;greeting_provider&gt;();</span><br><span class="line">    provider.<span class="built_in">greet</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>It <em>should</em> have worked, but it failed with a cryptic error.<br><img src="wtf.jpg" alt="Compilation Error"></p><p>After fiddling around with code, I solved it. Apparently, because of the arcane rules of C++ and even more arcane rules of template magick, so I needed to change the declaration of <code>greeter</code> and add ‘public’ to inheritance declaration.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">greeter</span> : <span class="keyword">public</span> igreeter <span class="comment">//made the inheritance &#x27;public&#x27; *facepalm*</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string message_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">greeter</span>(std::string message)</span><br><span class="line">        : <span class="built_in">message_</span>(std::<span class="built_in">move</span>(message))</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">greet</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; std::cout &lt;&lt; message_ &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><em>It actually worked!</em><br><img src="rage.jpg" alt="that feeling when your code finally works"></p><p>Now, the only thing left in this case is to make <code>message</code> a named parameter, so not every class that has a <code>std::string</code> in its constructor will receive the value from the binding.<br>A minor change was needed to <code>greeter</code> declaration:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> msg = [] &#123;&#125;; <span class="comment">//this is parameter &#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">greeter</span> : <span class="keyword">public</span> igreeter</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string message_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//specify that the first parameter has the name &#x27;msg&#x27;</span></span><br><span class="line">    <span class="built_in">BOOST_DI_INJECT_TRAITS</span>((named = msg) std::string);</span><br><span class="line">    <span class="built_in">greeter</span>(std::string message)</span><br><span class="line">        : <span class="built_in">message_</span>(std::<span class="built_in">move</span>(message))</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">greet</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; std::cout &lt;&lt; message_ &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And then, a minor change to dependency registration code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">auto</span> injector = </span><br><span class="line">  <span class="built_in">make_injector</span></span><br><span class="line">  (</span><br><span class="line">    di::bind&lt;igreeter&gt;.<span class="built_in">to</span>&lt;greeter&gt;(),</span><br><span class="line">    di::<span class="built_in">bind</span>&lt;greeting_provider&gt;().<span class="built_in">to</span>&lt;greeting_provider&gt;(),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//this is a *named* parameter now</span></span><br><span class="line">    di::<span class="built_in">bind</span>&lt;std::string&gt;().<span class="built_in">named</span>(msg).<span class="built_in">to</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>I continued to play around with the library, using it feels a bit awkward to me, but what do I know? I am not a C++ developer and it is likely I felt that way because I am used to the way C# IOC/DI libraries work.<br>Considering the fact that C++ has no reflection, I never thought a library with such rich functionality is even possible. (and I am very happy to be wrong!)  </p><blockquote><p>If you want to see <em>how</em> rich is the functionality, take a look at <a href="https://boost-experimental.github.io/di/examples.html">Boost.DI examples</a></p></blockquote><p>And if any C++ developer reads this, do tell me if I wrote anything wrong here :)</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> C++ </tag>
            
            <tag> IOC/DI </tag>
            
            <tag> C++ Templates </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronization primitives + async/await = trouble</title>
      <link href="/2019/12/05/async-sync/"/>
      <url>/2019/12/05/async-sync/</url>
      
        <content type="html"><![CDATA[<p>Recently, my colleague was investigating an interesting issue. A <code>ReaderWriterLockSlim</code> was sometimes throwing the following exception when releasing a read lock.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Threading.SynchronizationLockException: &#x27;The read lock is being released without being held.&#x27;</span><br></pre></td></tr></table></figure><p>The code looked fairly straightforward and it <em>should</em> have worked properly, but after some meditation on the mysteries of C# and the universe, he noticed something interesting. An <em>await</em> call between taking the lock and releasing it. </p><p>Roughly, the problematic code had the following pattern:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rwl = <span class="keyword">new</span> ReaderWriterLockSlim();</span><br><span class="line">rwl.EnterReadLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//doing stuff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> Task.Delay(<span class="number">1000</span>); <span class="comment">//an async call with &#x27;await&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//doing some more stuff</span></span><br><span class="line"></span><br><span class="line">rwl.ExitReadLock();</span><br></pre></td></tr></table></figure><p>A suspicion was confirmed by looking at the <a href="https://github.com/microsoft/referencesource/blob/master/System.Core/System/threading/ReaderWriterLockSlim/ReaderWriterLockSlim">reference implementation</a> of <code>ReaderWriterLockSlim</code> - a field that tracks the amount of locks taken is defined like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ThreadStatic</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ReaderWriterCount t_rwc;</span><br></pre></td></tr></table></figure><p>The lock taking code looks like this (omitting some code for clarity):</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">TryEnterReadLockCore</span>(<span class="params">TimeoutTracker timeout</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//some code</span></span><br><span class="line">  lrwc = GetThreadRWCount(<span class="literal">false</span>); <span class="comment">//get read/write lock count PER THREAD</span></span><br><span class="line">  <span class="comment">//some more code</span></span><br><span class="line">  lrwc.readercount++;</span><br><span class="line">  <span class="comment">//even more code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>That was enough to understand what was the issue. Using <em>async/await</em> yields current thread until the <em>async</em> method finishes execution and then fetches another thread from the thread pool to continue execution - and since <code>ReaderWriterLockSlim</code> uses <code>ThreadStatic</code> to store the counts of read/write locks, no wonder it thinks the lock was never taken after <em>async/await</em> call!</p><p>The solution in such cases is either removing usage of <em>async/await</em> or utilizing a different set of synchronization primitives that are compatible with thread yields resulting from <em>await</em> calls.<br>There is excellent series of blog posts on the topic by Stephen Toub, where he shows how async-compatible synchronization primitives can be implemented. The first blog post you can find <a href="https://devblogs.microsoft.com/pfxteam/building-async-coordination-primitives-part-1-asyncmanualresetevent/">here</a>.<br>Also, check out <a href="https://github.com/StephenCleary/AsyncEx">AsyncEx</a> - a very handy library with full set of async-compatible synchronization primitives, so you don’t <em>have to</em> implement your own.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Async </tag>
            
            <tag> Programming </tag>
            
            <tag> Multithreading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Listening to data changes in PostgreSQL and C#</title>
      <link href="/2019/12/02/listening-events-postgresql/"/>
      <url>/2019/12/02/listening-events-postgresql/</url>
      
        <content type="html"><![CDATA[<h3 id="To-poll-or-not-to-poll"><a href="#To-poll-or-not-to-poll" class="headerlink" title="To poll or not to poll?"></a>To poll or not to poll?</h3><p>Nowadays, fast, responsive UI that reacts to data changes is pretty much a given (well, not always, yes, but often enough to talk about it!). If it is an application with just one user it is not that hard to implement, but what if there are multiple users in a system that affect each other?<br>The answer would be… not to poll if you can, because more often than not there is another, better way. Many databases, both NoSQL and RDBMS offer functionality to push events to the connected clients.  </p><h3 id="So-what-are-we-doing-in-this-post"><a href="#So-what-are-we-doing-in-this-post" class="headerlink" title="So, what are we doing in this post?"></a>So, what are we doing in this post?</h3><p>RavenDB has awesome feature called <a href="https://ravendb.net/docs/article-page/4.2/csharp/client-api/data-subscriptions/what-are-data-subscriptions">Data Subscriptions</a>, which allow its client-api to receive near real-time notifications and changed data.<br>I was curious to see how such feature works in other databases. The following is the result of my tinkering with PostgreSQL, I tried (and succeeded!) making PostgreSQL C# driver to receive events of any change of data in the database.</p><h3 id="Setting-the-server-side-to-send-notifications-about-data-changes"><a href="#Setting-the-server-side-to-send-notifications-about-data-changes" class="headerlink" title="Setting the server-side to send notifications about data changes"></a>Setting the server-side to send notifications about data changes</h3><p>In order to set up change event listening, I will be using <a href="https://www.postgresql.org/docs/12/sql-notify.html">NOTIFY</a>)/<a href="https://www.postgresql.org/docs/12/sql-listen.html">LISTEN</a> commands.</p><h4 id="Setting-up-the-database"><a href="#Setting-up-the-database" class="headerlink" title="Setting up the database"></a>Setting up the database</h4><p>I installed the latest version PostgreSQL server at the time of writing, version 12. (But you don’t have to use version 12 - from what I’ve read, the following SQL code should work for any PostgreSQL that supports JSON natively)<br>As a test dataset I have used a Northwind database from <a href="https://github.com/pthom/northwind_psql">this repository</a>, but any dataset can be used, really.</p><h4 id="A-function-that-will-be-used-in-change-triggers"><a href="#A-function-that-will-be-used-in-change-triggers" class="headerlink" title="A function that will be used in change triggers"></a>A function that will be used in change triggers</h4><p>Any table we want to watch for changes in its data would have a trigger that would “forward” the change to a function that would use <a href="https://www.postgresql.org/docs/12/sql-notify.html">NOTIFY statement</a> to listening clients.<br>The following is such function:  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="built_in">public</span>.&quot;NotifyOnDataChange&quot;()</span><br><span class="line">  <span class="keyword">RETURNS</span> <span class="type">trigger</span></span><br><span class="line">  <span class="keyword">LANGUAGE</span> <span class="string">&#x27;plpgsql&#x27;</span></span><br><span class="line"><span class="keyword">AS</span> $BODY$ </span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">  data <span class="type">JSON</span>;</span><br><span class="line">  notification <span class="type">JSON</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">-- if we delete, then pass the old data</span></span><br><span class="line">  <span class="comment">-- if we insert or update, pass the new data</span></span><br><span class="line">  <span class="keyword">IF</span> (<span class="built_in">TG_OP</span> = <span class="string">&#x27;DELETE&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">    data = row_to_json(<span class="built_in">OLD</span>);</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    data = row_to_json(<span class="built_in">NEW</span>);</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- create json payload</span></span><br><span class="line">  <span class="comment">-- note that here can be done projection </span></span><br><span class="line">  notification = json_build_object(</span><br><span class="line">            <span class="string">&#x27;table&#x27;</span>,<span class="built_in">TG_TABLE_NAME</span>,</span><br><span class="line">            <span class="string">&#x27;action&#x27;</span>, <span class="built_in">TG_OP</span>, <span class="comment">-- can have value of INSERT, UPDATE, DELETE</span></span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>, data);  </span><br><span class="line">            </span><br><span class="line">    <span class="comment">-- note that channel name MUST be lowercase, otherwise pg_notify() won&#x27;t work</span></span><br><span class="line">    <span class="keyword">PERFORM</span> pg_notify(<span class="string">&#x27;datachange&#x27;</span>, notification::<span class="type">TEXT</span>);</span><br><span class="line">  <span class="keyword">RETURN</span> <span class="built_in">NEW</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$BODY$;</span><br></pre></td></tr></table></figure><h4 id="Change-triggers"><a href="#Change-triggers" class="headerlink" title="Change triggers"></a>Change triggers</h4><p>Now, we will set up triggers to wire change events with <strong>NotifyOnDataChange</strong> function.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> &quot;OnDataChange&quot;</span><br><span class="line">  <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> </span><br><span class="line">  <span class="keyword">ON</span> <span class="built_in">public</span>.orders</span><br><span class="line">  <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line">  <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> <span class="built_in">public</span>.&quot;NotifyOnDataChange&quot;();</span><br></pre></td></tr></table></figure><p>That is nice, but what if we want notifications from all of the tables in the database?<br>The following function will iterate over all tables and create triggers in each of them</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="built_in">public</span>.&quot;CreateOnDataChangeForAllTables&quot;()</span><br><span class="line">  <span class="keyword">RETURNS</span> <span class="type">void</span></span><br><span class="line">  <span class="keyword">LANGUAGE</span> <span class="string">&#x27;plpgsql&#x27;</span></span><br><span class="line"><span class="keyword">AS</span> $BODY$</span><br><span class="line"><span class="keyword">DECLARE</span>  </span><br><span class="line">  createTriggerStatement <span class="type">TEXT</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">FOR</span> createTriggerStatement <span class="keyword">IN</span> <span class="keyword">SELECT</span></span><br><span class="line">    <span class="string">&#x27;CREATE TRIGGER OnDataChange AFTER INSERT OR DELETE OR UPDATE ON &#x27;</span></span><br><span class="line">    || tab_name</span><br><span class="line">    || <span class="string">&#x27; FOR EACH ROW EXECUTE PROCEDURE public.&quot;NotifyOnDataChange&quot;();&#x27;</span> <span class="keyword">AS</span> trigger_creation_query</span><br><span class="line">  <span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      quote_ident(table_schema) || <span class="string">&#x27;.&#x27;</span> || quote_ident(<span class="built_in">table_name</span>) <span class="keyword">as</span> tab_name</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      information_schema.<span class="keyword">tables</span></span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">      table_schema <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;pg_catalog&#x27;</span>, <span class="string">&#x27;information_schema&#x27;</span>)</span><br><span class="line">      <span class="keyword">AND</span> table_schema <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;pg_toast%&#x27;</span></span><br><span class="line">  ) <span class="keyword">as</span> TableNames</span><br><span class="line">  <span class="keyword">LOOP</span></span><br><span class="line">    <span class="keyword">EXECUTE</span>  createTriggerStatement; <span class="comment">--actually create the trigger</span></span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">END</span>$BODY$;</span><br></pre></td></tr></table></figure><p>That’s it! The server-side is ready to send notifications for data changes.</p><h3 id="Setting-up-PostgreSQL-client-to-receive-events"><a href="#Setting-up-PostgreSQL-client-to-receive-events" class="headerlink" title="Setting-up PostgreSQL client to receive events"></a>Setting-up PostgreSQL client to receive events</h3><p>For a client test app, I used .Net Core 3.0 project with <a href="https://www.nuget.org/packages/Npgsql/4.1.2">Npgsql data provider</a>.<br>The following is code for listening for data changes.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> connString = <span class="string">&quot;&lt;connection string&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">using</span> <span class="keyword">var</span> conn = <span class="keyword">new</span> NpgsqlConnection(connString);</span><br><span class="line">    <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//e.Payload is string representation of JSON we constructed in NotifyOnDataChange() function</span></span><br><span class="line">    conn.Notification += (o, e) =&gt; Console.WriteLine(<span class="string">&quot;Received notification: &quot;</span> + e.Payload);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> NpgsqlCommand(<span class="string">&quot;LISTEN datachange;&quot;</span>, conn))</span><br><span class="line">      cmd.ExecuteNonQuery();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) </span><br><span class="line">      conn.Wait(); <span class="comment">// wait for events</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There we have it. A simple way to listen for changes in PostgreSQL.<br>Note, if the NpgsqlConnection client is not connected and changes happen, data change event will obviously be missed. Considering that RavenDB’s <a href="https://ravendb.net/docs/article-page/4.2/csharp/client-api/data-subscriptions/what-are-data-subscriptions">Data Subscriptions</a> allow handling “missed” events as well, I consider this a flaw of PostgreSQL notifications feature.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> SQL </tag>
            
            <tag> Event-handling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World with multiple microservices</title>
      <link href="/2019/11/28/hello-world-microservices/"/>
      <url>/2019/11/28/hello-world-microservices/</url>
      
        <content type="html"><![CDATA[<p>A friend of mine was having trouble finding simple but working example of microservices that he could tinker with, finding instead either buzzword-heavy theoretical articles or just samples in weird languages. I decided to prepare a simple project so it can be understood in short amount of time.  </p><p>The sample project is modeling a “Starbucks-style” coffee ordering process with a cashier, barista and order pick up counter with the following flow:</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  sequenceDiagram   participant Customer   participant Cashier   participant Barista   participant PickUpCounter   Customer-&gt;&gt;Cashier: Order drink and pay   Cashier-&gt;&gt;Barista: Relay customer order   Note over Barista: prepares the drink   Barista-&gt;&gt;PickUpCounter:Bring prepared drink   Note over PickUpCounter: Announce that the drink is ready  </pre></div><h3 id="The-sample-project"><a href="#The-sample-project" class="headerlink" title="The sample project"></a>The sample project</h3><p>For a tech stack, I will be using the awesome <a href="https://masstransit-project.com/">MassTransit</a> with <a href="https://www.rabbitmq.com/">RabbitMq</a> as transport and a client process that would send REST requests that “simulate” drink orders.</p><p>Here is a quick breakdown of what happens in the sample project:  </p><ol><li><strong>Client</strong> process sends random drink orders via POST http requests</li><li><strong>Cashier</strong> receives client orders via POST request and puts it into a received orders queue (<strong>BlockingCollection{T}</strong>)  </li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Nancy module to serve as API for registering orders</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CashierAPI</span> : <span class="title">NancyModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CashierAPI</span>(<span class="params">BlockingCollection&lt;Order&gt; ordersQueue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Post(<span class="string">&quot;/orders&quot;</span>, args =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            ordersQueue.Add(<span class="keyword">this</span>.Bind&lt;Order&gt;()); <span class="comment">//put orders into &quot;order queue&quot;</span></span><br><span class="line">            <span class="keyword">return</span> Response.AsJson(<span class="keyword">new</span> &#123; Message = <span class="string">&quot;OK&quot;</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line">Then the service registers the order <span class="keyword">and</span> forwards it <span class="keyword">as</span> a [domain <span class="keyword">event</span>](https:<span class="comment">//docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation) to the the rest of the services by pushing it to the message bus.</span></span><br><span class="line">  </span><br><span class="line">```<span class="function">cs</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!stoppingToken.IsCancellationRequested)</span><br><span class="line">        <span class="keyword">if</span> (_orderQueue.TryTake(<span class="keyword">out</span> <span class="keyword">var</span> order, <span class="number">500</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            order.WhenReceived = DateTime.UtcNow;</span><br><span class="line">            <span class="keyword">await</span> _messageBus.Publish(order, stoppingToken);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>, stoppingToken);</span><br><span class="line">&#125;    </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">**Barista** <span class="keyword">is</span> subscribed to <span class="string">&quot;receive order&quot;</span> domain <span class="keyword">event</span>, simulate random time working <span class="keyword">on</span> it then push it to message bus <span class="keyword">as</span> another domain <span class="keyword">event</span>  </span><br><span class="line"></span><br><span class="line">```<span class="function">cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Consume</span>(<span class="params">ConsumeContext&lt;Order&gt; context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!context.Message.IsComplete)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(_random.Next(<span class="number">500</span>, <span class="number">3000</span>));</span><br><span class="line">        context.Message.WhenCompleted = DateTime.UtcNow;</span><br><span class="line">        <span class="keyword">await</span> _messageBus.Publish(context.Message, CancellationToken.None);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>And finally, <strong><em>PickUpCounter</em></strong> would receive the event of <em>completed</em> order and announce it to customers</p><div class="note info flat"><p>Note that the actual “business logic” code is interleaved with infrastructure code and there is (almost) no logging and error handling. This is something that <em>obviously</em> shouldn’t happen in production-level code - this stuff is left out for better readability of code.</p></div><h3 id="Getting-and-running-the-project"><a href="#Getting-and-running-the-project" class="headerlink" title="Getting and running the project"></a>Getting and running the project</h3><ul><li>You can get the project from <a href="https://github.com/myarichuk/Samples.MSA">its Github repository</a>.</li><li>Compiling and running it would require <a href="https://dotnet.microsoft.com/download/dotnet-core/3.0">.Net Core 3.0 SDK</a>.</li><li>Running the project depends on local installation of <strong>RabbitMq</strong>. Take a look <a href="https://www.rabbitmq.com/download.html">here</a> for RabbitMq install instructions.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Programming </tag>
            
            <tag> MassTransit </tag>
            
            <tag> Microservices </tag>
            
            <tag> Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Middleware implementation in ASP.Net Core is weird</title>
      <link href="/2019/11/27/weird-aspnetcore-middleware/"/>
      <url>/2019/11/27/weird-aspnetcore-middleware/</url>
      
        <content type="html"><![CDATA[<p>This might seem like a clickbait-y article, but… it really looks this way! Allow me to explain.<br>For one of my pet projects, I considered implementing REST endpoints using <a href="http://nancyfx.org/">Nancy</a>, a nice and low ceremony web framework that I like.<br>To my surprise, in order to host it in .Net Core, as evident from the <a href="https://github.com/NancyFx/Nancy/tree/master/samples/Nancy.Demo.Hosting.Kestrel">example here</a>, I would need to use <strong>Microsoft.AspNetCore.Owin</strong> as a “mediator” between Kestrel and Nancy. Seeing this as an excuse to write something in the area I haven’t looked into yet, I looked into implementing a middleware component to run Nancy engine directly.  (You can find what I wrote in NuGet or in <a href="https://github.com/myarichuk/Nancy.Hosting.Kestrel">Github</a>)<br>To my surprise, a minimal middleware implementation looks like this:  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FoobarMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FoobarMiddleware</span>(<span class="params">RequestDelegate next</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">     _next = next;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">//execute middleware code     </span></span><br><span class="line">     <span class="keyword">await</span> _next(context); <span class="comment">//continue executing next middleware components</span></span><br><span class="line">     <span class="comment">//execute some more code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And then, in the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup"><strong>Startup</strong> class of ASP.Net Core initialization</a>, the middleware is “registered” like this:  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span> =&gt; app.UseMiddleware&lt;FoobarMiddleware&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This seemed like too much “magic” happening - I would expect the middleware class to be required to implement abstract class or interface in an API like this. I don’t like too much magic happening in my code so I decided to take a look at ASP.Net Core implementation and look at the  <code>UseMiddleware&lt;T&gt;()</code> source.  </p><p>Well, the relevant part looks like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">UseMiddlewareExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">string</span> InvokeMethodName = <span class="string">&quot;Invoke&quot;</span>;</span><br><span class="line">   <span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">string</span> InvokeAsyncMethodName = <span class="string">&quot;InvokeAsync&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// some code...</span></span><br><span class="line">        </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UseMiddleware</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder app, Type middleware, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//some code...</span></span><br><span class="line">            </span><br><span class="line">      <span class="keyword">return</span> app.Use(next =&gt;</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">//fetch middleware methods with reflection!</span></span><br><span class="line">         <span class="keyword">var</span> methods = middleware.GetMethods(BindingFlags.Instance | BindingFlags.Public);</span><br><span class="line">         <span class="keyword">var</span> invokeMethods = methods.Where(m =&gt;</span><br><span class="line">                    <span class="built_in">string</span>.Equals(m.Name, InvokeMethodName, StringComparison.Ordinal)</span><br><span class="line">                    || <span class="built_in">string</span>.Equals(m.Name, InvokeAsyncMethodName, StringComparison.Ordinal))</span><br><span class="line">                    .ToArray();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//some code...           </span></span><br><span class="line">         </span><br><span class="line">         <span class="keyword">var</span> methodInfo = invokeMethods[<span class="number">0</span>];</span><br><span class="line">         <span class="keyword">if</span> (!<span class="keyword">typeof</span>(Task).IsAssignableFrom(methodInfo.ReturnType))</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(Resources.FormatException_UseMiddlewareNonTaskReturnType(InvokeMethodName, InvokeAsyncMethodName, <span class="keyword">nameof</span>(Task)));</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//verify the amount and the type of parameters on &quot;Invoke&quot; or &quot;InvokeAsync&quot;</span></span><br><span class="line">         <span class="keyword">var</span> parameters = methodInfo.GetParameters();</span><br><span class="line">         <span class="keyword">if</span> (parameters.Length == <span class="number">0</span> || parameters[<span class="number">0</span>].ParameterType != <span class="keyword">typeof</span>(HttpContext))</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(Resources.FormatException_UseMiddlewareNoParameters(InvokeMethodName, InvokeAsyncMethodName, <span class="keyword">nameof</span>(HttpContext)));</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// some error handling and other code</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//create instance of middleware object with reflection!</span></span><br><span class="line">          <span class="keyword">var</span> instance = ActivatorUtilities.CreateInstance(app.ApplicationServices, middleware, ctorArgs);</span><br><span class="line">         <span class="comment">//the rest of the method...</span></span><br></pre></td></tr></table></figure><p>It turns out ASP.Net Core uses reflection to check if middleware class implements either <strong>Invoke</strong> or <strong>InvokeAsync</strong> methods AND uses reflection to instantiate it.<br>This is a weird choice, I think. Why use reflection when the same can be achieved at compile time using interface inheritance? Is it a good practice? A good question, to which (at least for now) I don’t have an answer.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C# </category>
          
          <category> ASP.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.Net Core </tag>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understandable errors in ANTLR4</title>
      <link href="/2019/11/21/antlr-error-handling/"/>
      <url>/2019/11/21/antlr-error-handling/</url>
      
        <content type="html"><![CDATA[<h3 id="There-is-more-than-one-way-to-peel-an-orange"><a href="#There-is-more-than-one-way-to-peel-an-orange" class="headerlink" title="There is more than one way to peel an orange!"></a>There is more than one way to peel an orange!</h3><p>Once a colleague told me: “you can’t really generate user-friendly error messages with ANTLR. This didn’t seem right - serious parser generators must have ways to generate proper errors…<br>Online searching has shown approaches to error handling mostly revolve around either various implementations of <a href="https://www.antlr.org/api/Java/org/antlr/v4/runtime/ANTLRErrorStrategy.html">ANTLRErrorStrategy</a> or “fail fast” strategy that involves overriding implementation of <a href="https://www.antlr.org/api/Java/org/antlr/v4/runtime/DefaultErrorStrategy.html">DefaultErrorStrategy</a> to throw <strong>ParseCancellationException</strong>, which would cause parsing to stop at the first syntax error.<br>Those approaches were nice, but I wanted to find a way that would allow me to control both error messages and the “offending token” - syntax token to be highlighted in UI when showing syntax errors.  </p><p>Consider the following ANTLR grammar:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grammar TestStrings;</span><br><span class="line"></span><br><span class="line">testExpression: stringExpression EOF;</span><br><span class="line">stringExpression: QUOTE CHAR_SEQUENCE QUOTE;</span><br><span class="line"></span><br><span class="line">QUOTE: &#x27;&quot;&#x27;;</span><br><span class="line">CHAR_SEQUENCE: (~(&#x27;&quot;&#x27;| &#x27;\\&#x27;))*;</span><br><span class="line"></span><br><span class="line">SPACES: [ \u000B\t\r\n] -&gt; channel(HIDDEN);</span><br></pre></td></tr></table></figure><p>This combined grammar parses character sequence and detects C-style quoted strings. Now, in order to add custom errors in a declarative way, we will add a custom error to be thrown if the string is missing a closing quote. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">grammar TestStrings;</span><br><span class="line"></span><br><span class="line">testExpression: stringExpression EOF;</span><br><span class="line">stringExpression:       </span><br><span class="line">        QUOTE CHAR_SEQUENCE QUOTE #String</span><br><span class="line">    |   QUOTE CHAR_SEQUENCE &#123; NotifyErrorListeners(_input.Lt(-1), &quot;Missing a &#x27;\&quot;&#x27; at the end of the string!&quot;, null); &#125; #UnclosedString  </span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUOTE: &#x27;&quot;&#x27;;</span><br><span class="line">CHAR_SEQUENCE: (~(&#x27;&quot;&#x27;| &#x27;\\&#x27;))*;</span><br><span class="line"></span><br><span class="line">SPACES: [ \u000B\t\r\n] -&gt; channel(HIDDEN);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Note how <strong>_input.Lt(-1)</strong> is used to specify which token in the lexer stream is the “problematic” one, by using offset from current position in the stream. </p></div><p>Coupled with the following simple error listener, specifying errors like this provided me with what I wanted.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> SyntaxError</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> IRecognizer Recognizer;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> IToken OffendingSymbol;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">int</span> Line;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">int</span> CharPositionInLine;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">string</span> Message;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> RecognitionException Exception;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SyntaxError</span>(<span class="params">IRecognizer recognizer, IToken offendingSymbol, <span class="built_in">int</span> line, </span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="built_in">int</span> charPositionInLine, <span class="built_in">string</span> message, RecognitionException exception</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Recognizer = recognizer;</span><br><span class="line">        OffendingSymbol = offendingSymbol;</span><br><span class="line">        Line = line;</span><br><span class="line">        CharPositionInLine = charPositionInLine;</span><br><span class="line">        Message = message;</span><br><span class="line">        Exception = exception;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SyntaxErrorListener</span> : <span class="title">BaseErrorListener</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> List&lt;SyntaxError&gt; Errors = <span class="keyword">new</span> List&lt;SyntaxError&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SyntaxError</span>(<span class="params">IRecognizer recognizer, IToken offendingSymbol, <span class="built_in">int</span> line, <span class="built_in">int</span> charPositionInLine, <span class="built_in">string</span> msg,</span></span></span><br><span class="line"><span class="params"><span class="function">        RecognitionException e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Errors.Add(<span class="keyword">new</span> SyntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As I am not an expert on ANTLR, if you think this can be done in a better way or you think this is not a good way of handling errors in ANTLR, do let me know!<br/>There is always a place for improvement.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Parsers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANTLR </tag>
            
            <tag> C# </tag>
            
            <tag> Parsers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hosting Hexo.io in Heroku</title>
      <link href="/2019/11/21/heroku-hexo/"/>
      <url>/2019/11/21/heroku-hexo/</url>
      
        <content type="html"><![CDATA[<p>When trying to set up my blog to be hosted in Heroku, I set up it so I can push int Github repo, then Heroku will pull the code and deploy it. Locally it seemed to work fine with Hexo’s server, so I was a bit surprised when my blog failed. Heroku logs have shown the following:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">25</span>.<span class="number">000000</span>+<span class="number">00</span>:<span class="number">00</span> app[api]: Build succeeded</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">27</span>.<span class="number">173507</span>+<span class="number">00</span>:<span class="number">00</span> heroku[web.<span class="number">1</span>]: Stopping <span class="literal">all</span> processes with SIGTERM</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">27</span>.<span class="number">241329</span>+<span class="number">00</span>:<span class="number">00</span> heroku[web.<span class="number">1</span>]: Process exited with status <span class="number">143</span></span><br><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">29</span>.<span class="number">990618</span>+<span class="number">00</span>:<span class="number">00</span> heroku[web.<span class="number">1</span>]: Starting process with command `npm start`</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">33</span>.<span class="number">485877</span>+<span class="number">00</span>:<span class="number">00</span> heroku[web.<span class="number">1</span>]: State changed from starting to crashed</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">33</span>.<span class="number">556555</span>+<span class="number">00</span>:<span class="number">00</span> heroku[web.<span class="number">1</span>]: State changed from crashed to starting</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">33</span>.<span class="number">470506</span>+<span class="number">00</span>:<span class="number">00</span> heroku[web.<span class="number">1</span>]: Process exited with status <span class="number">1</span></span><br><span class="line"><span class="attribute">2019</span>-<span class="number">11</span>-<span class="number">20</span>T22:<span class="number">39</span>:<span class="number">33</span>.<span class="number">322139</span>+<span class="number">00</span>:<span class="number">00</span> app[web.<span class="number">1</span>]: npm ERR! missing script: start</span><br></pre></td></tr></table></figure><p>Apparently, Heroku tries to execute <strong>start</strong> script on Hexo website, so adding the following script to <strong>package.json</strong> solved this issue.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server -p $PORT&quot;</span></span><br><span class="line"><span class="comment">// the rest of the scripts</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Meta </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo.io </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setting up the blog, a meta-post!</title>
      <link href="/2019/11/18/setting-up/"/>
      <url>/2019/11/18/setting-up/</url>
      
        <content type="html"><![CDATA[<p>After taking a look at a couple of more “mainstream” blogging systems, I was looking for a way to do some blogging and not deal with over-engineered systems that are bloated with unnecessary features. I didn’t want to spend time in understanding the details required to actually tweak those systems and customize them to my liking.<br>And then I found static website generators like Jekyll and Hexo. After choosing Hexo because it used a more familiar toolset, I found out that I actually understood how it worked without investing too much time. And with my (VERY!) limited knowledge of web programming I could tweak it and make my blog to look and feel the way I wanted it.<br>“Great…” I hear you say “… now how do I do that?”</p><h3 id="Setting-up"><a href="#Setting-up" class="headerlink" title="Setting up"></a>Setting up</h3><p>The idea behind <a href="https://hexo.io/">Hexo.io</a> is simple. The Hexo system compiles with Node.js a static website from a template and it’s pages from markdown files.<br>Setting up a minimal blog is easy. After <a href="https://nodejs.org/en/download/">installing Node.js</a> on your system, we simply need to execute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><p>That’s it! The last command will create a folder named ‘blog’ with necessary files to generate your website (blog?)<br>The next step is to actually check that it works. Simply, execute the following.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>Now you have a local webserver running that will host your blog and you can test it. (by default it would be <a href="http://localhost:4000">http://localhost:4000</a>)</p><h3 id="Customizing-it"><a href="#Customizing-it" class="headerlink" title="Customizing it"></a>Customizing it</h3><p>Setting up is nice, but nobody really wants a website with default look and feel. So, now what?</p><img src="/2019/11/18/setting-up/fun-begins.jpg" class=""><p>First step would be to design the look and feel of the website, which can be done in two ways.</p><ul><li>If you have some knowledge in web development, you can have a go at creating your own theme for Hexo. This would probably require some web design skills with CSS and knowledge of one of the supported Javascript template engines (such as <a href="https://github.com/hexojs/hexo-renderer-ejs">EJS</a>, <a href="https://github.com/hexojs/hexo-renderer-haml">Haml</a>, <a href="https://github.com/hexojs/hexo-renderer-jade">Jade</a>, or <a href="https://github.com/maxknee/hexo-render-pug">Pug</a>. A good starting place would be <a href="http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/">in this article</a> and <a href="https://hexo.io/docs/themes.html">Hexo’s documentation article</a> can be useful as well.</li><li>If you are like me and don’t know that much about web development, you can simply get one of <a href="https://hexo.io/themes/">existing themes</a> and tweak it to your liking. At the very minimum, it would involve fiddling with <em>_config.yml</em> file inside the theme’s folder, but tweaking around page templates and CSS is also possible, of course.</li></ul><p>For example, in case of this blog, I took an <a href="https://github.com/jerryc127/hexo-theme-butterfly">existing theme - “Butterfly”</a> and tweaked it a little.</p><h3 id="Creating-content"><a href="#Creating-content" class="headerlink" title="Creating content"></a>Creating content</h3><p>Finally, when the tweaking is complete it is time to actually write something, this is why why wanted a blog in the first place, no? </br><br>Running the following console command will create an empty post with specified title - which is simply a markdown file at <strong>[Hexo root]/source/_posts/[post title].md</strong></p><p>Console command to create a new post:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><p>You can read more about writing in Hexo in <a href="https://hexo.io/docs/writing.html">relevant documentation article</a>.</p><h3 id="Publishing-it"><a href="#Publishing-it" class="headerlink" title="Publishing it"></a>Publishing it</h3><p>After finishing writing a post or two, it is time to publish the website.<br>We would start by executing the following command in the console:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>This would “compile” markdown and theme’s templates into a static website, which then can be deployed to a hosting service.<br><br/><br><em>Note: the destination of such “compilation” would be <strong>[Hexo root]/public folder</strong></em><br><br/></p><p>Now, after we generated our static website, it is time to deploy it. Before doing that, we would need to configure Hexo’s deploy command in the <strong>_config.yml</strong> file, a command that can be used to deploy compiled website to one or more destinations.<br>For example, the following will enable deployment to a git repository</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> [<span class="string">repository</span> <span class="string">url</span>]</span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span> <span class="string">name</span>]</span><br></pre></td></tr></table></figure><p>You can read more about the deploy command <a href="https://hexo.io/docs/one-command-deployment">in it’s documentation article</a>.</p><p>So, that’s it. Have fun blogging! <br/><br>Actually, I think this blog post is a bit longer than it could (or should!) be, but I wanted to be thorough, especially since this is my first blog post :)</p>]]></content>
      
      
      <categories>
          
          <category> Meta </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo.io </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
