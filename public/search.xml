<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Setting up the blog, a meta-post!</title>
      <link href="/2019/11/18/setting-up/"/>
      <url>/2019/11/18/setting-up/</url>
      
        <content type="html"><![CDATA[<p>After taking a look at a couple of more “mainstream” blogging systems, I was looking for a way to do some blogging and not deal with over-engineered systems that are bloated with unnecessary features. I didn’t want to spend time in understanding the details required to actually tweak those systems and customize them to my liking.<br>And then I found static website generators like Jekyll and Hexo. After choosing Hexo because it used a more familiar toolset, I found out that I actually understood how it worked without investing too much time. And with my (VERY!) limited knowledge of web programming I could tweak it and make my blog to look and feel the way I wanted it.<br>“Great…” I hear you say “… now how do I do that?”</p><h3 id="Setting-up"><a href="#Setting-up" class="headerlink" title="Setting up"></a>Setting up</h3><p>The idea behind <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo.io</a> is simple. The Hexo system compiles with Node.js a static website from a template and it’s pages from markdown files.<br>Setting up a minimal blog is easy. After <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">installing Node.js</a> on your system, we simply need to execute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-cli -g<br>$ hexo init blog<br></code></pre></td></tr></table></figure><p>That’s it! The last command will create a folder named ‘blog’ with necessary files to generate your website (blog?)<br>The next step is to actually check that it works. Simply, execute the following.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br>$ hexo server<br></code></pre></td></tr></table></figure><p>Now you have a local webserver running that will host your blog and you can test it. (by default it would be <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>)</p><h3 id="Customizing-it"><a href="#Customizing-it" class="headerlink" title="Customizing it"></a>Customizing it</h3><p>Setting up is nice, but nobody really wants a website with default look and feel. So, now what?</p><img class="lazyload" data-src="/2019/11/18/setting-up/fun-begins.jpg"><p>First step would be to design the look and feel of the website, which can be done in two ways.</p><ul><li>If you have some knowledge in web development, you can have a go at creating your own theme for Hexo. This would probably require some web design skills with CSS and knowledge of one of the supported Javascript template engines (such as <a href="https://github.com/hexojs/hexo-renderer-ejs" target="_blank" rel="noopener">EJS</a>, <a href="https://github.com/hexojs/hexo-renderer-haml" target="_blank" rel="noopener">Haml</a>, <a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="noopener">Jade</a>, or <a href="https://github.com/maxknee/hexo-render-pug" target="_blank" rel="noopener">Pug</a>. A good starting place would be <a href="http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/" target="_blank" rel="noopener">in this article</a> and <a href="https://hexo.io/docs/themes.html" target="_blank" rel="noopener">Hexo’s documentation article</a> can be useful as well.</li><li>If you are like me and don’t know that much about web development, you can simply get one of <a href="https://hexo.io/themes/" target="_blank" rel="noopener">existing themes</a> and tweak it to your liking. At the very minimum, it would involve fiddling with <em>_config.yml</em> file inside the theme’s folder, but tweaking around page templates and CSS is also possible, of course.</li></ul><p>For example, in case of this blog, I took an <a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">existing theme - “Butterfly”</a> and tweaked it a little.</p><h3 id="Creating-content"><a href="#Creating-content" class="headerlink" title="Creating content"></a>Creating content</h3><p>Finally, when the tweaking is complete it is time to actually write something, this is why why wanted a blog in the first place, no? <br><br>Running the following console command will create an empty post with specified title - which is simply a markdown file at <strong>[Hexo root]/source/_posts/[post title].md</strong></p><p>Console command to create a new post:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new post &lt;title&gt;<br></code></pre></td></tr></table></figure><p>You can read more about writing in Hexo in <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">relevant documentation article</a>.</p><h3 id="Publishing-it"><a href="#Publishing-it" class="headerlink" title="Publishing it"></a>Publishing it</h3><p>After finishing writing a post or two, it is time to publish the website.<br>We would start by executing the following command in the console:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>This would “compile” markdown and theme’s templates into a static website, which then can be deployed to a hosting service.<br><br><br><em>Note: the destination of such “compilation” would be <strong>[Hexo root]/public folder</strong></em><br><br></p><p>Now, after we generated our static website, it is time to deploy it. Before doing that, we would need to configure Hexo’s deploy command in the <strong>_config.yml</strong> file, a command that can be used to deploy compiled website to one or more destinations.<br>For example, the following will enable deployment to a git repository</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">[repository</span> <span class="hljs-string">url]</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">[branch</span> <span class="hljs-string">name]</span><br></code></pre></td></tr></table></figure><p>You can read more about the deploy command <a href="https://hexo.io/docs/one-command-deployment" target="_blank" rel="noopener">in it’s documentation article</a>.</p><p>So, that’s it. Have fun blogging! <br><br>Actually, I think this blog post is a bit longer than it could (or should!) be, but I wanted to be thorough, especially since this is my first blog post :)</p>]]></content>
      
      
      <categories>
          
          <category> Meta </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo.io </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
